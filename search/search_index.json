{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen zur educast.nrw-App Dokumentation Auf dieser Website finden Sie die technische Dokumentation der Mobileapp educast.nrw. Um einen komfortablen, mobilen Zugriff auf mit educast.nrw bereitgestellte Inhalte durch Studierende zu erm\u00f6glichen, wurde die mobile Anwendung entwickelt, die hier dokumentiert wird. Zentrale Ansichten der App educast.nrw Die Weiterentwicklung videobasierter Lehre \u00fcbernimmt in Nordrhein-Westfalen das Projekt educast.nrw . Als Teil des Programms \u201eDigitale Hochschule NRW\u201c wird es durch das Land NRW gef\u00f6rdert. Das educast.nrw-Konsortium bilden die Universit\u00e4t Duisburg-Essen, die Universit\u00e4t zu K\u00f6ln und konsortialf\u00fchrend die Westf\u00e4lische Wilhelms-Universit\u00e4t M\u00fcnster. educast.nrw nutzt f\u00fcr die Erstellung, Verwaltung und Bereitstellung der Videoinhalte die Software Opencast . Opencast baut Systeme f\u00fcr das Hochschulumfeld mithilfe von Entwicklern internationaler Hochschulen und Organisationen. Die Systeme sind nach dem Open-Source-Ansatz frei verf\u00fcgbar. Die Video App soll in Zukunft im Rahmen von educast.nrw eingesetzt werden und auch der Opencast-Community als Open-Source-Software zur Verf\u00fcgung stehen. Struktur der Dokumentation Auf dieser Seite werden nachfolgend die Motivation, sowie die daraus abgeleiteten Anforderungen erl\u00e4utert. F\u00fcr die weitere Orientierung beachten Sie bitte folgende Auflistung. Die Navigation erfolgt \u00fcber die Navigationsleiste links. Setup des Systems Userguide Funktionsweise des Logins Restriktionen und Limitationen der App Ausblick Motivation Im Mittelpunkt der Entwicklung stand es, den Endnutzern, also Studierenden, einen komfortablen, simplen und modernen Weg zu bieten, auch \u00fcber Mobilger\u00e4te auf Vorlesungsvideos zugreifen zu k\u00f6nnen. Bei YouTube oder Streaminganbietern wie Netflix und Amazon Prime, sind Smartphone-Apps l\u00e4ngst ein g\u00e4ngiger und einfacher Weg auf die Angebote zuzugreifen. F\u00fcr digitale Vorlesungen gilt das nicht, der Zugriff ist unn\u00f6tig aufwendig und umst\u00e4ndlich. Ein weiteres Problem entsteht durch infrastrukturelle Unzul\u00e4nglichkeiten beim Netzausbau in NRW bzw. Deutschland. Vorlesungen sollten f\u00fcr den Konsum unterwegs auch Offline zur Verf\u00fcgung stehen, damit Internetunterbrechungen nicht zu Streamingabbruch f\u00fchren und Datenvolumen gespart werden kann. Die abgeleiteten Anforderungen k\u00f6nnen hier eingesehen werden.","title":"Home"},{"location":"#willkommen-zur-educastnrw-app-dokumentation","text":"Auf dieser Website finden Sie die technische Dokumentation der Mobileapp educast.nrw. Um einen komfortablen, mobilen Zugriff auf mit educast.nrw bereitgestellte Inhalte durch Studierende zu erm\u00f6glichen, wurde die mobile Anwendung entwickelt, die hier dokumentiert wird. Zentrale Ansichten der App","title":"Willkommen zur educast.nrw-App Dokumentation"},{"location":"#educastnrw","text":"Die Weiterentwicklung videobasierter Lehre \u00fcbernimmt in Nordrhein-Westfalen das Projekt educast.nrw . Als Teil des Programms \u201eDigitale Hochschule NRW\u201c wird es durch das Land NRW gef\u00f6rdert. Das educast.nrw-Konsortium bilden die Universit\u00e4t Duisburg-Essen, die Universit\u00e4t zu K\u00f6ln und konsortialf\u00fchrend die Westf\u00e4lische Wilhelms-Universit\u00e4t M\u00fcnster. educast.nrw nutzt f\u00fcr die Erstellung, Verwaltung und Bereitstellung der Videoinhalte die Software Opencast . Opencast baut Systeme f\u00fcr das Hochschulumfeld mithilfe von Entwicklern internationaler Hochschulen und Organisationen. Die Systeme sind nach dem Open-Source-Ansatz frei verf\u00fcgbar. Die Video App soll in Zukunft im Rahmen von educast.nrw eingesetzt werden und auch der Opencast-Community als Open-Source-Software zur Verf\u00fcgung stehen.","title":"educast.nrw"},{"location":"#struktur-der-dokumentation","text":"Auf dieser Seite werden nachfolgend die Motivation, sowie die daraus abgeleiteten Anforderungen erl\u00e4utert. F\u00fcr die weitere Orientierung beachten Sie bitte folgende Auflistung. Die Navigation erfolgt \u00fcber die Navigationsleiste links. Setup des Systems Userguide Funktionsweise des Logins Restriktionen und Limitationen der App Ausblick","title":"Struktur der Dokumentation"},{"location":"#motivation","text":"Im Mittelpunkt der Entwicklung stand es, den Endnutzern, also Studierenden, einen komfortablen, simplen und modernen Weg zu bieten, auch \u00fcber Mobilger\u00e4te auf Vorlesungsvideos zugreifen zu k\u00f6nnen. Bei YouTube oder Streaminganbietern wie Netflix und Amazon Prime, sind Smartphone-Apps l\u00e4ngst ein g\u00e4ngiger und einfacher Weg auf die Angebote zuzugreifen. F\u00fcr digitale Vorlesungen gilt das nicht, der Zugriff ist unn\u00f6tig aufwendig und umst\u00e4ndlich. Ein weiteres Problem entsteht durch infrastrukturelle Unzul\u00e4nglichkeiten beim Netzausbau in NRW bzw. Deutschland. Vorlesungen sollten f\u00fcr den Konsum unterwegs auch Offline zur Verf\u00fcgung stehen, damit Internetunterbrechungen nicht zu Streamingabbruch f\u00fchren und Datenvolumen gespart werden kann. Die abgeleiteten Anforderungen k\u00f6nnen hier eingesehen werden.","title":"Motivation"},{"location":"anforderungen/","text":"Anforderungen In diesem Abschnitt sind die Anforderungen an die App aufgelistet. Die Hauptaufgabe der App ist das Abspielen von Vorlesungsvideos auf dem mobilen Endger\u00e4t. Die Videos sind von dem educast.nrw Server, der jeweiligen Hochschule der Studierenden, zu laden. Der Player Die zentrale Aufgabe der App ist das Abspielen von Videos. Deshalb hat der Player mehr Funktionen als nur das Starten und Pausieren von Videos. So kann man die Qualit\u00e4t und die Wiedergabegeschwindigkeit \u00e4ndern. Mit einem Doppelklick auf dem Bildschirm auf der linken bzw. rechten Seite l\u00e4sst sich das Video vor bzw. zur\u00fcck spulen, so dass die Studierenden sich z.B. komplexe Inhalte einfach nochmal anschauen k\u00f6nnen. Der Videofortschritt wird auch Ger\u00e4t\u00fcbergreifen gespeichert. Nach einer Pause k\u00f6nnen die Studierenden genau an der richtigen Position das Video weiterschauen. Bei der Aufzeichnung von Vorlesungen gibt es oft zwei Ansichten. Eine Ansicht von den Folien und eine von der Vortragenden Person. Deshalb gibt es eine Funktion zum Wechseln der Ansicht. Login Des Weiteren ist eine Anmeldefunktion ben\u00f6tigt. Hier melden sich die Studierenden mit ihrer Hochschulkennung und ihren Passw\u00f6rtern an. Dieselben Anmeldedaten, die auch f\u00fcr andere Hochschule bezogene IT-Dienste ben\u00f6tigt sind. So ist sichergestellt das nur berechtigte Personen die App nutzen k\u00f6nnen. Au\u00dferdem k\u00f6nnen individuelle Einstellungen gespeichert werden. Zuletzt erm\u00f6glicht die Anmeldung die Identifizierung der Hochschulzugeh\u00f6rigkeit der Studierenden. Dies ist f\u00fcr die Auswahl des richtigen educast.nrw Servers n\u00f6tig. Die Studierenden bleiben 6 Monate lang angemeldet und m\u00fcssen sich nicht jeden Tag neu anmelden. Au\u00dferdem k\u00f6nnen die Studierenden in den Einstellungen ihren Namen und ihre E-Mail einsehen, um so festzustellen wer grade angemeldet ist. Einschreibeschl\u00fcssel Da ein Gro\u00dfteil der Vorlesungen und somit auch der Vorlesungsvideos mit einem Einschreibeschl\u00fcssen gesichert sind, ist eine sichere Funktion zum Abfragen des Einschreibeschl\u00fcssells notwendig. Zuletzt wird eine intuitive UI Struktur ben\u00f6tig, mit der man durch die App navigieren kann. So sollte kein Zugriff auf anderen Inhalt gew\u00e4hrt werden, bevor man nicht angemeldet ist. Sprachauswahl Eins der Wichtigsten Features ist die Auswahl der Sprache. In den Einstellungen kann zwischen Deutsch und Englisch gewechselt werden. So wird die Nutzung der App auch internationalen Studenten erm\u00f6glicht. Download Eine weitere Wichtige Funktion, ist das Downloaden der Videos und sp\u00e4tere abspielen ohne eine Internetverbindung. Dies erm\u00f6glicht zum Beispiel das Schauen von Vorlesungsvideos in der Deutschen Bahn, wo selten eine stabile Internetverbindung vorhanden ist (todo: zu wertend?). Ein entscheidender Vorteil der Mobilen App, im Vergleich zum Anschauen der Videos im Browser. Im Browser ist kein Download m\u00f6glich, da nicht sichergestellt werden kann, dass die Videos nicht an unbefugte weitergegeben werden. Bei der educast App werden die Videos in einem sicheren App spezifischen Bereich gespeichert, so dass nicht au\u00dferhalb der App darauf zugegriffen werden kann. Es ist m\u00f6glich einzelne Videos zu downloaden, sowie alle Videos einer Vorlesung zusammen. In den Einstellungen kann man die Videos wieder l\u00f6schen und es gibt auch die M\u00f6glichkeit alle Videos auf einmal zu l\u00f6schen. Performance Auch die Performance der App ist wichtig. Es wird vermieden redundante Request an den Server zu senden, stattdessen werden Informationen die sp\u00e4ter noch gebraucht werden im App internen Cache gehalten (todo: stimmt das so). Dadurch wird Internetbandbreite eingespart und jene Elemente k\u00f6nnen schneller angezeigt werden. Au\u00dferdem werden auch viele Request im Backend f\u00fcr 15 Minuten gecached. So wird die Antwort Zeit von h\u00e4ufigen Anfragen beschleunigt und Rechenleistung vom Server geschont, wodurch gr\u00f6\u00dfere Nutzerzahlen weniger problematisch sind.","title":"Anforderungen"},{"location":"anforderungen/#anforderungen","text":"In diesem Abschnitt sind die Anforderungen an die App aufgelistet. Die Hauptaufgabe der App ist das Abspielen von Vorlesungsvideos auf dem mobilen Endger\u00e4t. Die Videos sind von dem educast.nrw Server, der jeweiligen Hochschule der Studierenden, zu laden.","title":"Anforderungen"},{"location":"anforderungen/#der-player","text":"Die zentrale Aufgabe der App ist das Abspielen von Videos. Deshalb hat der Player mehr Funktionen als nur das Starten und Pausieren von Videos. So kann man die Qualit\u00e4t und die Wiedergabegeschwindigkeit \u00e4ndern. Mit einem Doppelklick auf dem Bildschirm auf der linken bzw. rechten Seite l\u00e4sst sich das Video vor bzw. zur\u00fcck spulen, so dass die Studierenden sich z.B. komplexe Inhalte einfach nochmal anschauen k\u00f6nnen. Der Videofortschritt wird auch Ger\u00e4t\u00fcbergreifen gespeichert. Nach einer Pause k\u00f6nnen die Studierenden genau an der richtigen Position das Video weiterschauen. Bei der Aufzeichnung von Vorlesungen gibt es oft zwei Ansichten. Eine Ansicht von den Folien und eine von der Vortragenden Person. Deshalb gibt es eine Funktion zum Wechseln der Ansicht.","title":"Der Player"},{"location":"anforderungen/#login","text":"Des Weiteren ist eine Anmeldefunktion ben\u00f6tigt. Hier melden sich die Studierenden mit ihrer Hochschulkennung und ihren Passw\u00f6rtern an. Dieselben Anmeldedaten, die auch f\u00fcr andere Hochschule bezogene IT-Dienste ben\u00f6tigt sind. So ist sichergestellt das nur berechtigte Personen die App nutzen k\u00f6nnen. Au\u00dferdem k\u00f6nnen individuelle Einstellungen gespeichert werden. Zuletzt erm\u00f6glicht die Anmeldung die Identifizierung der Hochschulzugeh\u00f6rigkeit der Studierenden. Dies ist f\u00fcr die Auswahl des richtigen educast.nrw Servers n\u00f6tig. Die Studierenden bleiben 6 Monate lang angemeldet und m\u00fcssen sich nicht jeden Tag neu anmelden. Au\u00dferdem k\u00f6nnen die Studierenden in den Einstellungen ihren Namen und ihre E-Mail einsehen, um so festzustellen wer grade angemeldet ist.","title":"Login"},{"location":"anforderungen/#einschreibeschlussel","text":"Da ein Gro\u00dfteil der Vorlesungen und somit auch der Vorlesungsvideos mit einem Einschreibeschl\u00fcssen gesichert sind, ist eine sichere Funktion zum Abfragen des Einschreibeschl\u00fcssells notwendig. Zuletzt wird eine intuitive UI Struktur ben\u00f6tig, mit der man durch die App navigieren kann. So sollte kein Zugriff auf anderen Inhalt gew\u00e4hrt werden, bevor man nicht angemeldet ist.","title":"Einschreibeschl\u00fcssel"},{"location":"anforderungen/#sprachauswahl","text":"Eins der Wichtigsten Features ist die Auswahl der Sprache. In den Einstellungen kann zwischen Deutsch und Englisch gewechselt werden. So wird die Nutzung der App auch internationalen Studenten erm\u00f6glicht.","title":"Sprachauswahl"},{"location":"anforderungen/#download","text":"Eine weitere Wichtige Funktion, ist das Downloaden der Videos und sp\u00e4tere abspielen ohne eine Internetverbindung. Dies erm\u00f6glicht zum Beispiel das Schauen von Vorlesungsvideos in der Deutschen Bahn, wo selten eine stabile Internetverbindung vorhanden ist (todo: zu wertend?). Ein entscheidender Vorteil der Mobilen App, im Vergleich zum Anschauen der Videos im Browser. Im Browser ist kein Download m\u00f6glich, da nicht sichergestellt werden kann, dass die Videos nicht an unbefugte weitergegeben werden. Bei der educast App werden die Videos in einem sicheren App spezifischen Bereich gespeichert, so dass nicht au\u00dferhalb der App darauf zugegriffen werden kann. Es ist m\u00f6glich einzelne Videos zu downloaden, sowie alle Videos einer Vorlesung zusammen. In den Einstellungen kann man die Videos wieder l\u00f6schen und es gibt auch die M\u00f6glichkeit alle Videos auf einmal zu l\u00f6schen.","title":"Download"},{"location":"anforderungen/#performance","text":"Auch die Performance der App ist wichtig. Es wird vermieden redundante Request an den Server zu senden, stattdessen werden Informationen die sp\u00e4ter noch gebraucht werden im App internen Cache gehalten (todo: stimmt das so). Dadurch wird Internetbandbreite eingespart und jene Elemente k\u00f6nnen schneller angezeigt werden. Au\u00dferdem werden auch viele Request im Backend f\u00fcr 15 Minuten gecached. So wird die Antwort Zeit von h\u00e4ufigen Anfragen beschleunigt und Rechenleistung vom Server geschont, wodurch gr\u00f6\u00dfere Nutzerzahlen weniger problematisch sind.","title":"Performance"},{"location":"database/","text":"Datenbank Zum Betrieb des Backends ist ein relationales Datenbanksystem notwendig, in dem die n\u00f6tigen Daten zum Operieren gespeichert werden k\u00f6nnen. Daher ist es n\u00f6tig, dass Zugriff auf eine MySQL-Datenbank besteht. Konfiguration Die Login-Daten f\u00fcr die Datenbankverbindung m\u00fcssen in der Konfigurationsdatei ( .login.yaml ) angegeben werden. N\u00e4here Informationen k\u00f6nnen in der Setup-Dokumentation gefunden werden. Wichtig: Es wird empfohlen die MySQL-Variablen wait_timeout und interactive_timeout zu erh\u00f6hen, damit eine Dysfunktion des Backends wegen abgebrochener Verbindung ausgeschlossen werden kann. Aufsetzen Zur Inbetriebnahme ist nach der richtigen Konfiguration der Login-Daten und der richtigen Rechte Zuteilung Nichts weiter zutun. Alle Tabellen werden automatisch erstellt. Daten Im Folgenden ist erl\u00e4utert, welche Daten gespeichert werden. Es handelt sich haupts\u00e4chlich um Daten zur Erm\u00f6glichung des Abonnieren-Features. Modell der Datenbanktabellen als UML-Klassendiagramm (Primary Keys sind unterstrichen) Zum Einen werden eindeutige Nutzerdaten gespeichert, die es erm\u00f6glichen die User beim Login zu identifizieren und einer Universit\u00e4t zuzuordnen. Diese Zuordnung ist technisch notwendig um jedem Studierenden den Zugriff auf die Kurse und Videos seiner Universit\u00e4t zu erm\u00f6glichen. Des Weiteren werden einige technische Daten zum Login-Token gespeichert, genaueres dazu kann hier gefunden werden. Au\u00dferdem werden die vorhandenen Serien gespeichert, was erleichtert den Zugriff auf verf\u00fcgbare Serien erleichtert und das Verwenden von einem Passwort/Einschreibeschl\u00fcssel zum exklusiven Zugang zu Kursvideos erm\u00f6glicht. Die Tabelle Subscription (engl. f\u00fcr \"Abonnement\") speichert die Relation zwischen Nutzern und den Serien und gibt an, welcher Studierende, welchen Kurs gespeichert hat. Diese Abonnements werden noch in Semester gegliedert, um dem User im Frontend eine einfache Ansicht erm\u00f6glichen zu k\u00f6nnen.","title":"Datenbank"},{"location":"database/#datenbank","text":"Zum Betrieb des Backends ist ein relationales Datenbanksystem notwendig, in dem die n\u00f6tigen Daten zum Operieren gespeichert werden k\u00f6nnen. Daher ist es n\u00f6tig, dass Zugriff auf eine MySQL-Datenbank besteht.","title":"Datenbank"},{"location":"database/#konfiguration","text":"Die Login-Daten f\u00fcr die Datenbankverbindung m\u00fcssen in der Konfigurationsdatei ( .login.yaml ) angegeben werden. N\u00e4here Informationen k\u00f6nnen in der Setup-Dokumentation gefunden werden. Wichtig: Es wird empfohlen die MySQL-Variablen wait_timeout und interactive_timeout zu erh\u00f6hen, damit eine Dysfunktion des Backends wegen abgebrochener Verbindung ausgeschlossen werden kann.","title":"Konfiguration"},{"location":"database/#aufsetzen","text":"Zur Inbetriebnahme ist nach der richtigen Konfiguration der Login-Daten und der richtigen Rechte Zuteilung Nichts weiter zutun. Alle Tabellen werden automatisch erstellt.","title":"Aufsetzen"},{"location":"database/#daten","text":"Im Folgenden ist erl\u00e4utert, welche Daten gespeichert werden. Es handelt sich haupts\u00e4chlich um Daten zur Erm\u00f6glichung des Abonnieren-Features. Modell der Datenbanktabellen als UML-Klassendiagramm (Primary Keys sind unterstrichen) Zum Einen werden eindeutige Nutzerdaten gespeichert, die es erm\u00f6glichen die User beim Login zu identifizieren und einer Universit\u00e4t zuzuordnen. Diese Zuordnung ist technisch notwendig um jedem Studierenden den Zugriff auf die Kurse und Videos seiner Universit\u00e4t zu erm\u00f6glichen. Des Weiteren werden einige technische Daten zum Login-Token gespeichert, genaueres dazu kann hier gefunden werden. Au\u00dferdem werden die vorhandenen Serien gespeichert, was erleichtert den Zugriff auf verf\u00fcgbare Serien erleichtert und das Verwenden von einem Passwort/Einschreibeschl\u00fcssel zum exklusiven Zugang zu Kursvideos erm\u00f6glicht. Die Tabelle Subscription (engl. f\u00fcr \"Abonnement\") speichert die Relation zwischen Nutzern und den Serien und gibt an, welcher Studierende, welchen Kurs gespeichert hat. Diese Abonnements werden noch in Semester gegliedert, um dem User im Frontend eine einfache Ansicht erm\u00f6glichen zu k\u00f6nnen.","title":"Daten"},{"location":"entwurf/","text":"Entwurf In diesen Abschnitt sind die Strukturen beschrieben, mit denen die Anforderungen umgesetzt sind. Unterteilt sind diese in Frontend und Backend. Frontend Damit die Studierenden der App alle Funktionen nutzen k\u00f6nnen und sich gut zurechtfinden, gibt es mehrere m\u00f6glichst intuitive Ansichten. In der folgenden Grafik sind diese Ansichten und ihre Navigationswege zu sehen. App Ansichten und Navigationspfade Bevor man auf die eigentliche App zugreifen kann, muss man sich auf der Login Seite anmelden. Diese wird automatisch ge\u00f6ffnet, falls man kein g\u00fcltiges Token hat, welches man nach anmelden f\u00fcr 6 Monate bekommt. Hier werden die Studierenden durch den Anmeldeprozess geleitet. Detailliertere Informationen gibt es auf der Login (todo: Link einf\u00fcgen) Seite. Nach erfolgreichen anmelden kommt man zur Hauptansicht der App. Bei der Botton Navigation Bar kann man zwischen 3 Ansichten w\u00e4hlen, wie den Studierenden von anderen Apps bereits bekannt sein sollte. Dort k\u00f6nnen die Studierenden zwischen den Ansichten Home, Suche und Einstellungen wechseln. Home Die Ansicht Suche ist daf\u00fcr da neue Kurse zu Abonnieren, um deren Vorlesungsvideos ansehen zu k\u00f6nnen. Einstellungen fortsetzung folgft ist das nicht quasi schon ein Userguide? Backend Das Backend stellt die Daten f\u00fcr das Frontend bereit. App spezifische Daten, wie z.B. die Abonnierten Vorlesungen der Studierenden sind in der Datenbank (todo: link Datenbank) von dem Backend gespeichert. Diese werden vom Backend aufbereitet und durch HTTPS API-Endpunkte bereitgestellt. Die Vorlesungsvideos und die Metadaten zu jenen hat jede Hochschule auf ihrer educast Instanz gespeichert. Grafik","title":"Aufbau/Entwurf"},{"location":"entwurf/#entwurf","text":"In diesen Abschnitt sind die Strukturen beschrieben, mit denen die Anforderungen umgesetzt sind. Unterteilt sind diese in Frontend und Backend.","title":"Entwurf"},{"location":"entwurf/#frontend","text":"Damit die Studierenden der App alle Funktionen nutzen k\u00f6nnen und sich gut zurechtfinden, gibt es mehrere m\u00f6glichst intuitive Ansichten. In der folgenden Grafik sind diese Ansichten und ihre Navigationswege zu sehen. App Ansichten und Navigationspfade Bevor man auf die eigentliche App zugreifen kann, muss man sich auf der Login Seite anmelden. Diese wird automatisch ge\u00f6ffnet, falls man kein g\u00fcltiges Token hat, welches man nach anmelden f\u00fcr 6 Monate bekommt. Hier werden die Studierenden durch den Anmeldeprozess geleitet. Detailliertere Informationen gibt es auf der Login (todo: Link einf\u00fcgen) Seite. Nach erfolgreichen anmelden kommt man zur Hauptansicht der App. Bei der Botton Navigation Bar kann man zwischen 3 Ansichten w\u00e4hlen, wie den Studierenden von anderen Apps bereits bekannt sein sollte. Dort k\u00f6nnen die Studierenden zwischen den Ansichten Home, Suche und Einstellungen wechseln. Home Die Ansicht Suche ist daf\u00fcr da neue Kurse zu Abonnieren, um deren Vorlesungsvideos ansehen zu k\u00f6nnen. Einstellungen fortsetzung folgft ist das nicht quasi schon ein Userguide?","title":"Frontend"},{"location":"entwurf/#backend","text":"Das Backend stellt die Daten f\u00fcr das Frontend bereit. App spezifische Daten, wie z.B. die Abonnierten Vorlesungen der Studierenden sind in der Datenbank (todo: link Datenbank) von dem Backend gespeichert. Diese werden vom Backend aufbereitet und durch HTTPS API-Endpunkte bereitgestellt. Die Vorlesungsvideos und die Metadaten zu jenen hat jede Hochschule auf ihrer educast Instanz gespeichert. Grafik","title":"Backend"},{"location":"future_work/","text":"Ausblick Basierend auf dem aktuellen Stand soll an dieser Stelle ein Ausblick \u00fcber zuk\u00fcnftige Arbeit an der App und deren Ausbau gegeben werden. Lasttests Release in den AppStores Behebung der Restriktionen Zus\u00e4tzliche Funktionen Zus\u00e4tzliche Funktionen sollen den Studierenden ein besseres Nutzungserlebnis erm\u00f6glichen und das volle Potenzial der App aussch\u00f6pfen. Die Funktionen sind von uns ausgew\u00e4hlte Beispiele, die M\u00f6glichkeiten f\u00fcr den weiteren Entwicklungsverlauf des Projekts educast.nrw darstellen sollen. Zu diesen geh\u00f6ren: Vorschaubilder Kapitel Tablet Zoomen Vorschaubilder Bei Youtube gibt es die M\u00f6glichkeit \u00fcber die Zeitleiste des Videos zu scrubben. Dabei werden auf der Zeitleiste viele kleine Vorschaubilder angezeigt, die dem User einen Einblick in Szenen zu einem anderen Zeitpunkt im Video geben. Solch eine Funktion k\u00f6nnte den Studierenden in der mobilen Anwendung von educast.nrw behilflich sein, um eine passende Szene zu finden und dort hin zu navigieren. Kapitel Bei Youtube kann der Erstellende des Videos sich daf\u00fcr entscheiden Kapitel hinzuzuf\u00fcgen. Der User sieht diese in der Zeitleiste. Die Abschnitte werden mit Abtrennungen gegliedert und beim navigieren zu diesen Abtrennungen taucht der Name des Kapitels auf. Dies w\u00e4re auch f\u00fcr Studierende n\u00fctzlich, um verschiedene Kapitel identifizieren zu k\u00f6nnen und z.B. f\u00fcr das Wiederholen von Inhalten gezielt zu einem bestimmten Kapitel springen zu k\u00f6nnen. Dadurch w\u00fcrden die Videos \u00fcbersichtlicher und somit gezielteres Lernen erm\u00f6glicht. Tablet Die Videoapp ist zwar bereits jetzt auch auf Tablets vollumf\u00e4nglich nutzbar, aber sie ist bisher nur auf die Gr\u00f6\u00dfe von Smartphones optimiert. Viele Studierende w\u00fcrden die Option auf dem Tablet zu lernen sehr wahrscheinlich nutzen und deswegen sollte auch eine tablettoptimierte Version erstellt werden. Diese w\u00fcrde daf\u00fcr sorgen, dass der auf einem Tablet verf\u00fcgbare, zus\u00e4tzliche Platz sinnvoll genutzt werden k\u00f6nnte. Ein Beispiel f\u00fcr frei verf\u00fcgbaren Platz findet sich im Videobildschirm. Denn educast.nrw bietet die Funktion mehrere Videos parallel laufen zu lassen, wie z.B. eine Dozierendenansicht parallel zur Folienansicht. Auf dem Smartphone werden die Ansichten aufgrund des kleinen Bildschirms separat angezeigt und es muss zwischen ihnen gewechselt werden. Auf dem Tablet hingegen k\u00f6nnte eine Picture-in-Picture Ansicht genutzt werden. Das bedeutet, es k\u00f6nnten zwei Videos gleichzeitig auf einem Bildschirm abgespielt werden, w\u00e4hrend das eine Video in voller Gr\u00f6\u00dfe verf\u00fcgbar und das andere klein zu sehen ist. Au\u00dferdem k\u00f6nnte die Seitenleiste im Home-Bildschirm permanent bestehen bleiben wodurch die n\u00f6tigen Schritte bei der Navigation durch die App verringert werden k\u00f6nnten. Zoomen Die Ansicht auf vielen Smartphones ist klein und Schriften in Videos unleserlich. Um kleine Schriften dennoch lesen zu k\u00f6nnen, ben\u00f6tigen Studierende Unterst\u00fctzung. Diese k\u00f6nnte mit einer Zoomfunktion gew\u00e4hrleistet werden. Damit k\u00f6nnten Studierende in unleserliche Folien hineinzoomen. Das w\u00e4re vor allem bei hilfreich, wenn Dozierende Dokumente zeigen oder Tafelbilder erstellen, die klein und schwierig zu lesen sind. Dies ist eine kleine Auswahl an M\u00f6glichkeiten f\u00fcr zuk\u00fcnftige Umsetzungen und unseren Vorstellungen wie die mobile Anwendung weitere Verbesserungen erhalten k\u00f6nnte.","title":"Ausblick"},{"location":"future_work/#ausblick","text":"Basierend auf dem aktuellen Stand soll an dieser Stelle ein Ausblick \u00fcber zuk\u00fcnftige Arbeit an der App und deren Ausbau gegeben werden.","title":"Ausblick"},{"location":"future_work/#lasttests","text":"","title":"Lasttests"},{"location":"future_work/#release-in-den-appstores","text":"","title":"Release in den AppStores"},{"location":"future_work/#behebung-der-restriktionen","text":"","title":"Behebung der Restriktionen"},{"location":"future_work/#zusatzliche-funktionen","text":"Zus\u00e4tzliche Funktionen sollen den Studierenden ein besseres Nutzungserlebnis erm\u00f6glichen und das volle Potenzial der App aussch\u00f6pfen. Die Funktionen sind von uns ausgew\u00e4hlte Beispiele, die M\u00f6glichkeiten f\u00fcr den weiteren Entwicklungsverlauf des Projekts educast.nrw darstellen sollen. Zu diesen geh\u00f6ren: Vorschaubilder Kapitel Tablet Zoomen","title":"Zus\u00e4tzliche Funktionen"},{"location":"future_work/#vorschaubilder","text":"Bei Youtube gibt es die M\u00f6glichkeit \u00fcber die Zeitleiste des Videos zu scrubben. Dabei werden auf der Zeitleiste viele kleine Vorschaubilder angezeigt, die dem User einen Einblick in Szenen zu einem anderen Zeitpunkt im Video geben. Solch eine Funktion k\u00f6nnte den Studierenden in der mobilen Anwendung von educast.nrw behilflich sein, um eine passende Szene zu finden und dort hin zu navigieren.","title":"Vorschaubilder"},{"location":"future_work/#kapitel","text":"Bei Youtube kann der Erstellende des Videos sich daf\u00fcr entscheiden Kapitel hinzuzuf\u00fcgen. Der User sieht diese in der Zeitleiste. Die Abschnitte werden mit Abtrennungen gegliedert und beim navigieren zu diesen Abtrennungen taucht der Name des Kapitels auf. Dies w\u00e4re auch f\u00fcr Studierende n\u00fctzlich, um verschiedene Kapitel identifizieren zu k\u00f6nnen und z.B. f\u00fcr das Wiederholen von Inhalten gezielt zu einem bestimmten Kapitel springen zu k\u00f6nnen. Dadurch w\u00fcrden die Videos \u00fcbersichtlicher und somit gezielteres Lernen erm\u00f6glicht.","title":"Kapitel"},{"location":"future_work/#tablet","text":"Die Videoapp ist zwar bereits jetzt auch auf Tablets vollumf\u00e4nglich nutzbar, aber sie ist bisher nur auf die Gr\u00f6\u00dfe von Smartphones optimiert. Viele Studierende w\u00fcrden die Option auf dem Tablet zu lernen sehr wahrscheinlich nutzen und deswegen sollte auch eine tablettoptimierte Version erstellt werden. Diese w\u00fcrde daf\u00fcr sorgen, dass der auf einem Tablet verf\u00fcgbare, zus\u00e4tzliche Platz sinnvoll genutzt werden k\u00f6nnte. Ein Beispiel f\u00fcr frei verf\u00fcgbaren Platz findet sich im Videobildschirm. Denn educast.nrw bietet die Funktion mehrere Videos parallel laufen zu lassen, wie z.B. eine Dozierendenansicht parallel zur Folienansicht. Auf dem Smartphone werden die Ansichten aufgrund des kleinen Bildschirms separat angezeigt und es muss zwischen ihnen gewechselt werden. Auf dem Tablet hingegen k\u00f6nnte eine Picture-in-Picture Ansicht genutzt werden. Das bedeutet, es k\u00f6nnten zwei Videos gleichzeitig auf einem Bildschirm abgespielt werden, w\u00e4hrend das eine Video in voller Gr\u00f6\u00dfe verf\u00fcgbar und das andere klein zu sehen ist. Au\u00dferdem k\u00f6nnte die Seitenleiste im Home-Bildschirm permanent bestehen bleiben wodurch die n\u00f6tigen Schritte bei der Navigation durch die App verringert werden k\u00f6nnten.","title":"Tablet"},{"location":"future_work/#zoomen","text":"Die Ansicht auf vielen Smartphones ist klein und Schriften in Videos unleserlich. Um kleine Schriften dennoch lesen zu k\u00f6nnen, ben\u00f6tigen Studierende Unterst\u00fctzung. Diese k\u00f6nnte mit einer Zoomfunktion gew\u00e4hrleistet werden. Damit k\u00f6nnten Studierende in unleserliche Folien hineinzoomen. Das w\u00e4re vor allem bei hilfreich, wenn Dozierende Dokumente zeigen oder Tafelbilder erstellen, die klein und schwierig zu lesen sind. Dies ist eine kleine Auswahl an M\u00f6glichkeiten f\u00fcr zuk\u00fcnftige Umsetzungen und unseren Vorstellungen wie die mobile Anwendung weitere Verbesserungen erhalten k\u00f6nnte.","title":"Zoomen"},{"location":"login/","text":"Erkl\u00e4rung des Loginprozesses und des Zusammenspiels von App, Backend und OIDC-Provider","title":"Login"},{"location":"restriktionen/","text":"","title":"Restriktionen"},{"location":"setup/","text":"Technisches Setup des Systems Backend Damit die App funktioniert, muss zuerst das Backend aufgesetzt werden. Hierf\u00fcr ist ein Server mit Linux zu empfehlen, ein anderes OS w\u00fcrde aber durchaus auch funktionieren. Installation Nach erfolgreichem Aufsetzen des Servers und Installierens von Python (Version >= 3.7) den Source Code herunterladen mit git clone https://zivgitlab.uni-muenster.de/educast-nrw/student-work/app/backend.git Alle vom Backend verwendeten Dependencies k\u00f6nnen anschlie\u00dfend mit pip installiert werden: cd backend pip install -r requirements.txt Config erstellen Als n\u00e4chstes muss die Config aufgesetzt werden. Der einfachste Weg dazu ist, das Programm zu starten, sodass eine leere Konfigurationsdatei erstellt wird. python main.py [--config '/path/to/.login.yaml'] Wenn keine Config-Flag \u00fcbergeben wird, wird die Konfigurationdatei '.login.yaml' im home-Directory des aktuellen Users erstellt. Durch Verwendung des Arguments kann die Datei einen anderen Pfad und Namen bekommen, wobei wichtig ist, dass der Dateityp YAML ist. Konfiguration In der Konfigurationsdatei m\u00fcssen die Login-Credentials f\u00fcr die verwendeten API-User, sowie f\u00fcr die MySQL-Datenbank angeben werden. # TODO private key API-User Die API-User m\u00fcssen in der Section apiuser konfiguriert werden. Jeder dieser User ist eine weitere Section, die benannt ist mit der dazugeh\u00f6rigen Domain der jeweiligen Universit\u00e4t. Dies ist wichtig, um die API-Requests, bei Studierenden von unterschiedlichen Universit\u00e4ten, dem richtigen API-User zu schicken. Die Section ist ein Dictionary mit den String-Werten url , username und password . F\u00fcr die Uni M\u00fcnster w\u00fcrde die Konfiguration also wie folgt aussehen. apiuser: uni-muenster.de: url: https://link.to.uni-muenster.educast.de/api username: 'username' password: 'password' Die Section apiuser kann beliebig viele API-User enthalten, bzw. sollte f\u00fcr jede Uni, die den educast.nrw nutzt, einen enthalten. Datenbank Die Section database konfiguriert die Verbindung zur MySQL-Datenbank. Hier m\u00fcssen die Host-Addresse, die verwendete Datenbank und der User konfiguriert werden. Der User muss Schreibzugriff in der Datenbank haben, alle genutzten Tabellen werden dann automatisch erstellt. database: database: backend host: localhost user: 'username' password: 'password' Keypair TODO: Keypair erkl\u00e4ren Server starten Nach erfolgreichem Konfigurieren kann das Backend gestartet werden. Zum Starten folgenden Befehl ausf\u00fchren: python main.py Wenn gew\u00fcnscht, kann der Pfad der Konfigurationsdatei mit dem Argument --config '/path/to/.login.yaml' \u00fcbergeben werden. Der Server wird standardm\u00e4\u00dfig auf Port 80 gestartet. Auch das ist anpassbar mit dem Argument --port 8080 . Meistens werden zum binden eines Ports unter 1000 Root-Rechte ben\u00f6tigt. Frontend Die App ist mit dem Framework Flutter in Dart geschrieben. Der erste Schritt um die App zu kompilieren ist, Flutter nach der offiziellen Anleitung zu installieren. Kompilierung Android Um die App f\u00fcr Android zu kompilieren muss das Appbundle oder die APK gebaut werden. Das Appbundle enth\u00e4lt die APKs f\u00fcr unterschiedliche Laufzeiten (ARM 32-bit, ARM 64-bit, x86 64-bit) und ist deshalb vom Google Playstore bevorzugt. Zum Erstellen muss im Projektordner flutter build appbundle ausgef\u00fchrt werden. Anschlie\u00dfend ist es unter /build/app/outputs/bundle/release/app.aab zu finden. Um die APKs zu kompilieren muss flutter build apk --split-per-abi ausgef\u00fchrt werden. Die Flag f\u00fchrt dazu, dass f\u00fcr die unterschiedlichen Laufzeiten eigene APKs erstellt werden, anstatt eine Gro\u00dfe, die den kompilierten Code von allen enth\u00e4lt. Anschlie\u00dfend k\u00f6nnen alle gebauten APKs unter /build/app/outputs/bundle/release gefunden werden. Um die App nun direkt auf einem Ger\u00e4t zu installieren, muss es \u00fcber USB angeschlossen werden und USB-Debugging in den Einstellungen aktiviert sein. Anschlie\u00dfend reicht es flutter install auszuf\u00fchren und der richtige Build wird installiert. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf. iOS Um die App auf einem iOS-Ger\u00e4t zu installieren, wird ein Mac und ein Apple Developer Account gebraucht. Das Ger\u00e4t muss per USB an den Computer angeschlossen werden und es muss sowohl dem Mac, als auch dem Entwicklerzertifikat vertraut werden. Nachdem dem \"Diesen Computer vertrauen?\"-Dialog beim Verbinden zugestimmt wurde, muss in den Einstellungen unter Allgemein > Ger\u00e4teverwaltung dem Zertifikat vertraut werden. Ab iOS 16 ist es dazu n\u00f6tig den Entwicklermodus in den Sicherheitseinstellungen zu aktivieren. Sollte Xcode nicht bereits auf dem Mac installiert sein, ist es notwendig, es von der offiziellen Website zu installieren. Anschlie\u00dfend muss im Flutter-Projektordner open ios/Runner.xcworkspace in einem Terminal aufgerufen werden. Somit wird ein Xcode Workspace erstellt. Nach Ausw\u00e4hlen des richtigen Ger\u00e4tes, muss in den Zieleinstellungen unter \"Runner\" im Reiter Signing & Capabilities Ihr Account bei Team ausgew\u00e4hlt sein. Nun kann die App mit dem Startknopf oder mit dem Befehl flutter run gestartet werden. Eine USB-Verbindung muss allerdings bestehen bleiben. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"Setup"},{"location":"setup/#technisches-setup-des-systems","text":"","title":"Technisches Setup des Systems"},{"location":"setup/#backend","text":"Damit die App funktioniert, muss zuerst das Backend aufgesetzt werden. Hierf\u00fcr ist ein Server mit Linux zu empfehlen, ein anderes OS w\u00fcrde aber durchaus auch funktionieren.","title":"Backend"},{"location":"setup/#installation","text":"Nach erfolgreichem Aufsetzen des Servers und Installierens von Python (Version >= 3.7) den Source Code herunterladen mit git clone https://zivgitlab.uni-muenster.de/educast-nrw/student-work/app/backend.git Alle vom Backend verwendeten Dependencies k\u00f6nnen anschlie\u00dfend mit pip installiert werden: cd backend pip install -r requirements.txt","title":"Installation"},{"location":"setup/#config-erstellen","text":"Als n\u00e4chstes muss die Config aufgesetzt werden. Der einfachste Weg dazu ist, das Programm zu starten, sodass eine leere Konfigurationsdatei erstellt wird. python main.py [--config '/path/to/.login.yaml'] Wenn keine Config-Flag \u00fcbergeben wird, wird die Konfigurationdatei '.login.yaml' im home-Directory des aktuellen Users erstellt. Durch Verwendung des Arguments kann die Datei einen anderen Pfad und Namen bekommen, wobei wichtig ist, dass der Dateityp YAML ist.","title":"Config erstellen"},{"location":"setup/#konfiguration","text":"In der Konfigurationsdatei m\u00fcssen die Login-Credentials f\u00fcr die verwendeten API-User, sowie f\u00fcr die MySQL-Datenbank angeben werden. # TODO private key","title":"Konfiguration"},{"location":"setup/#api-user","text":"Die API-User m\u00fcssen in der Section apiuser konfiguriert werden. Jeder dieser User ist eine weitere Section, die benannt ist mit der dazugeh\u00f6rigen Domain der jeweiligen Universit\u00e4t. Dies ist wichtig, um die API-Requests, bei Studierenden von unterschiedlichen Universit\u00e4ten, dem richtigen API-User zu schicken. Die Section ist ein Dictionary mit den String-Werten url , username und password . F\u00fcr die Uni M\u00fcnster w\u00fcrde die Konfiguration also wie folgt aussehen. apiuser: uni-muenster.de: url: https://link.to.uni-muenster.educast.de/api username: 'username' password: 'password' Die Section apiuser kann beliebig viele API-User enthalten, bzw. sollte f\u00fcr jede Uni, die den educast.nrw nutzt, einen enthalten.","title":"API-User"},{"location":"setup/#datenbank","text":"Die Section database konfiguriert die Verbindung zur MySQL-Datenbank. Hier m\u00fcssen die Host-Addresse, die verwendete Datenbank und der User konfiguriert werden. Der User muss Schreibzugriff in der Datenbank haben, alle genutzten Tabellen werden dann automatisch erstellt. database: database: backend host: localhost user: 'username' password: 'password'","title":"Datenbank"},{"location":"setup/#keypair","text":"TODO: Keypair erkl\u00e4ren","title":"Keypair"},{"location":"setup/#server-starten","text":"Nach erfolgreichem Konfigurieren kann das Backend gestartet werden. Zum Starten folgenden Befehl ausf\u00fchren: python main.py Wenn gew\u00fcnscht, kann der Pfad der Konfigurationsdatei mit dem Argument --config '/path/to/.login.yaml' \u00fcbergeben werden. Der Server wird standardm\u00e4\u00dfig auf Port 80 gestartet. Auch das ist anpassbar mit dem Argument --port 8080 . Meistens werden zum binden eines Ports unter 1000 Root-Rechte ben\u00f6tigt.","title":"Server starten"},{"location":"setup/#frontend","text":"Die App ist mit dem Framework Flutter in Dart geschrieben. Der erste Schritt um die App zu kompilieren ist, Flutter nach der offiziellen Anleitung zu installieren.","title":"Frontend"},{"location":"setup/#kompilierung","text":"","title":"Kompilierung"},{"location":"setup/#android","text":"Um die App f\u00fcr Android zu kompilieren muss das Appbundle oder die APK gebaut werden. Das Appbundle enth\u00e4lt die APKs f\u00fcr unterschiedliche Laufzeiten (ARM 32-bit, ARM 64-bit, x86 64-bit) und ist deshalb vom Google Playstore bevorzugt. Zum Erstellen muss im Projektordner flutter build appbundle ausgef\u00fchrt werden. Anschlie\u00dfend ist es unter /build/app/outputs/bundle/release/app.aab zu finden. Um die APKs zu kompilieren muss flutter build apk --split-per-abi ausgef\u00fchrt werden. Die Flag f\u00fchrt dazu, dass f\u00fcr die unterschiedlichen Laufzeiten eigene APKs erstellt werden, anstatt eine Gro\u00dfe, die den kompilierten Code von allen enth\u00e4lt. Anschlie\u00dfend k\u00f6nnen alle gebauten APKs unter /build/app/outputs/bundle/release gefunden werden. Um die App nun direkt auf einem Ger\u00e4t zu installieren, muss es \u00fcber USB angeschlossen werden und USB-Debugging in den Einstellungen aktiviert sein. Anschlie\u00dfend reicht es flutter install auszuf\u00fchren und der richtige Build wird installiert. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"Android"},{"location":"setup/#ios","text":"Um die App auf einem iOS-Ger\u00e4t zu installieren, wird ein Mac und ein Apple Developer Account gebraucht. Das Ger\u00e4t muss per USB an den Computer angeschlossen werden und es muss sowohl dem Mac, als auch dem Entwicklerzertifikat vertraut werden. Nachdem dem \"Diesen Computer vertrauen?\"-Dialog beim Verbinden zugestimmt wurde, muss in den Einstellungen unter Allgemein > Ger\u00e4teverwaltung dem Zertifikat vertraut werden. Ab iOS 16 ist es dazu n\u00f6tig den Entwicklermodus in den Sicherheitseinstellungen zu aktivieren. Sollte Xcode nicht bereits auf dem Mac installiert sein, ist es notwendig, es von der offiziellen Website zu installieren. Anschlie\u00dfend muss im Flutter-Projektordner open ios/Runner.xcworkspace in einem Terminal aufgerufen werden. Somit wird ein Xcode Workspace erstellt. Nach Ausw\u00e4hlen des richtigen Ger\u00e4tes, muss in den Zieleinstellungen unter \"Runner\" im Reiter Signing & Capabilities Ihr Account bei Team ausgew\u00e4hlt sein. Nun kann die App mit dem Startknopf oder mit dem Befehl flutter run gestartet werden. Eine USB-Verbindung muss allerdings bestehen bleiben. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"iOS"},{"location":"struktur/","text":"Struktur erkl\u00e4ren: Wie h\u00e4ngen Frontend und Backend zusammen? Welche Rolle spielt educast? etc","title":"Struktur"},{"location":"userguide/","text":"","title":"Userguide"},{"location":"implementation/download/","text":"","title":"Download"},{"location":"implementation/player/","text":"Player Kernbestandteil der App ist der integrierte Videoplayer. Dieser baut auf dem \u201eFlick Videoplayer\u201c auf und wurde an unsere speziellen Anforderungen angepasst. Der Flick Videoplayer wiederum basiert auf dem offiziellen Videoplayer unseres verwendeten Frameworks Flutter . Die Entscheidung f\u00fcr den Flick Videoplayer Die Entscheidung den Flick Videoplayer als Basis zu nutzen, war eine der zentralen Entscheidungen dieses Projekts. Nach dem Untersuchen mehrerer Alternativen und nachdem sich alle Gruppenmitglieder bzgl. Dieser Thematik informiert hatten, haben wir uns f\u00fcr diese L\u00f6sung entschieden. Die erste Alternative w\u00e4re gewesen, den offiziellen Flutter Video Player als Basis zu verwenden. Dieser stellt jedoch lediglich Grundfunktionalit\u00e4ten zur Verf\u00fcgung, was diese L\u00f6sung sehr aufw\u00e4ndig f\u00fcr den begrenzten Projektzeitraum und unsere begrenzte Vorerfahrung gemacht h\u00e4tte. Als ersten Player, der f\u00fcr uns grunds\u00e4tzlich infrage kam und der auf dem Flutter Videoplayer basiert, haben wir uns \u201eChewie\u201c genauer angeschaut. Wir haben uns letztendlich gegen diesen Player entschieden, da bei ihm abh\u00e4ngig vom verwendeten Betriebssystem andere Benutzeroberfl\u00e4chen verwendet werden. Einerseits hielten wir die iOS-Version f\u00fcr unpraktisch und andererseits war es ausdr\u00fccklich gew\u00fcnscht, dass der Player auf beiden Plattformen m\u00f6glichst identisch aussieht. Dies w\u00e4re beim \u201eBetter Player\u201c der Fall gewesen. Dieser h\u00e4tte auch wichtige Funktionen wie das \u00c4ndern der Wiedergabegeschwindigkeit, das Anzeigen von Untertiteln oder das \u00c4ndern der Videoaufl\u00f6sung unterst\u00fctzt. Nachdem allerdings bei der Integration in unsere App erhebliche Performanceprobleme aufgetreten waren und diese dann auch in der, von den Entwicklern zur Verf\u00fcgung gestellten, Test-Applikation auftraten, mussten wir uns gegen den Better Player entscheiden. Es konnte keine Ursache f\u00fcr diese Probleme gefunden und behoben werden. Zuletzt fanden wir den angesprochenen Flick Video Player . Dieser baut ebenfalls auf dem Basisplayer von Flutter auf, stellt bereits einige wichtige Funktionen zur Verf\u00fcgung, hat uns optisch angesprochen und ist gut anpassbar bzw. erweiterbar. Da hier auch die Performance stimmte und es keine sonstigen Probleme gab, haben wir uns schlie\u00dflich daf\u00fcr entschieden den Flick Player zu verwenden. Allgemeiner Aufbau Flick Videoplayer Benutzeroberfl\u00e4che des Flick Videoplayers Unsere App nutzt die Benutzeroberfl\u00e4che des Flick Players und dessen Funktionen f\u00fcr das Wechseln von Videos und das Anzeigen von Untertiteln. Er stellt also die grundlegenden Bedienelemente wie Play, Pause, +10s, -10s per Doppeltap, einen Vollbildmodus und das Navigieren per Zeitleiste zur Verf\u00fcgung. Eigenes Men\u00fc im Videoplayer Eigenes Men\u00fc im Videoplayer Darauf aufbauend haben wir ein Men\u00fc f\u00fcr zus\u00e4tzliche Funktionalit\u00e4ten erstellt. Dieses Men\u00fc erm\u00f6glicht es Nutzern abh\u00e4ngig vom Video: Die Wiedergabegeschwindigkeit zu \u00e4ndern, die Aufl\u00f6sung zu \u00e4ndern, zwischen verschiedenen Ansichten zu wechseln, und Untertitel anzuzeigen. Anpassungen des Flick Videoplayers Der Flick Videoplayer stellt zwei anpassbare Klassen zur Verf\u00fcgung ( DataManager und CustomOrientationControls ), was wir f\u00fcr dieses Men\u00fc genutzt haben. Diese \u00c4nderungen reichten jedoch nicht aus und daher mussten wir interne Klassen des Players ver\u00e4ndern und ihn daf\u00fcr lokal in das Projekt integrieren. Dies war erforderlich, um zu gew\u00e4hrleisten, dass die Wiedergabeposition unver\u00e4ndert blieb, wenn die Aufl\u00f6sung oder die Ansicht gewechselt wurde. Im Ordner flick_video_player/lib/src/manager wurden an folgenden Stellen \u00c4nderungen vorgenommen: flick_manager.dart: handleChangeVideo( ) video_manager.dart: _handleChangeVideo( ), _changeVideo( ) Die \u00c4nderungen sind jeweils mit dem Stichwort \"CHANGED\" markiert. HTTP Live Streaming (HLS) Wir verwenden in der App HTTP Live Streaming (HLS) . F\u00fcr das Abspielen eines Videos erh\u00e4lt der Player eine Liste mit URLs zu Masterplaylisten. Gibt es f\u00fcr das Video mehrere Ansichten, sind es mehrere Masterplaylisten. Innerhalb dieser Masterplaylisten gibt es wiederum mehrere Variantenplaylists f\u00fcr die einzelnen Aufl\u00f6sungen. Um diese auszulesen, verwenden wir das Paket flutter_hls_parser . Restriktionen Momentan ist es leider nicht m\u00f6glich mehrzeilige Untertitel anzuzeigen und das Men\u00fc des Players im Vollbildmodus zu nutzen. Weitere Informationen hierzu finden sich im Bereich Restriktionen .","title":"Player"},{"location":"implementation/player/#player","text":"Kernbestandteil der App ist der integrierte Videoplayer. Dieser baut auf dem \u201eFlick Videoplayer\u201c auf und wurde an unsere speziellen Anforderungen angepasst. Der Flick Videoplayer wiederum basiert auf dem offiziellen Videoplayer unseres verwendeten Frameworks Flutter .","title":"Player"},{"location":"implementation/player/#die-entscheidung-fur-den-flick-videoplayer","text":"Die Entscheidung den Flick Videoplayer als Basis zu nutzen, war eine der zentralen Entscheidungen dieses Projekts. Nach dem Untersuchen mehrerer Alternativen und nachdem sich alle Gruppenmitglieder bzgl. Dieser Thematik informiert hatten, haben wir uns f\u00fcr diese L\u00f6sung entschieden. Die erste Alternative w\u00e4re gewesen, den offiziellen Flutter Video Player als Basis zu verwenden. Dieser stellt jedoch lediglich Grundfunktionalit\u00e4ten zur Verf\u00fcgung, was diese L\u00f6sung sehr aufw\u00e4ndig f\u00fcr den begrenzten Projektzeitraum und unsere begrenzte Vorerfahrung gemacht h\u00e4tte. Als ersten Player, der f\u00fcr uns grunds\u00e4tzlich infrage kam und der auf dem Flutter Videoplayer basiert, haben wir uns \u201eChewie\u201c genauer angeschaut. Wir haben uns letztendlich gegen diesen Player entschieden, da bei ihm abh\u00e4ngig vom verwendeten Betriebssystem andere Benutzeroberfl\u00e4chen verwendet werden. Einerseits hielten wir die iOS-Version f\u00fcr unpraktisch und andererseits war es ausdr\u00fccklich gew\u00fcnscht, dass der Player auf beiden Plattformen m\u00f6glichst identisch aussieht. Dies w\u00e4re beim \u201eBetter Player\u201c der Fall gewesen. Dieser h\u00e4tte auch wichtige Funktionen wie das \u00c4ndern der Wiedergabegeschwindigkeit, das Anzeigen von Untertiteln oder das \u00c4ndern der Videoaufl\u00f6sung unterst\u00fctzt. Nachdem allerdings bei der Integration in unsere App erhebliche Performanceprobleme aufgetreten waren und diese dann auch in der, von den Entwicklern zur Verf\u00fcgung gestellten, Test-Applikation auftraten, mussten wir uns gegen den Better Player entscheiden. Es konnte keine Ursache f\u00fcr diese Probleme gefunden und behoben werden. Zuletzt fanden wir den angesprochenen Flick Video Player . Dieser baut ebenfalls auf dem Basisplayer von Flutter auf, stellt bereits einige wichtige Funktionen zur Verf\u00fcgung, hat uns optisch angesprochen und ist gut anpassbar bzw. erweiterbar. Da hier auch die Performance stimmte und es keine sonstigen Probleme gab, haben wir uns schlie\u00dflich daf\u00fcr entschieden den Flick Player zu verwenden.","title":"Die Entscheidung f\u00fcr den Flick Videoplayer"},{"location":"implementation/player/#allgemeiner-aufbau","text":"","title":"Allgemeiner Aufbau"},{"location":"implementation/player/#flick-videoplayer","text":"Benutzeroberfl\u00e4che des Flick Videoplayers Unsere App nutzt die Benutzeroberfl\u00e4che des Flick Players und dessen Funktionen f\u00fcr das Wechseln von Videos und das Anzeigen von Untertiteln. Er stellt also die grundlegenden Bedienelemente wie Play, Pause, +10s, -10s per Doppeltap, einen Vollbildmodus und das Navigieren per Zeitleiste zur Verf\u00fcgung.","title":"Flick Videoplayer"},{"location":"implementation/player/#eigenes-menu-im-videoplayer","text":"Eigenes Men\u00fc im Videoplayer Darauf aufbauend haben wir ein Men\u00fc f\u00fcr zus\u00e4tzliche Funktionalit\u00e4ten erstellt. Dieses Men\u00fc erm\u00f6glicht es Nutzern abh\u00e4ngig vom Video: Die Wiedergabegeschwindigkeit zu \u00e4ndern, die Aufl\u00f6sung zu \u00e4ndern, zwischen verschiedenen Ansichten zu wechseln, und Untertitel anzuzeigen.","title":"Eigenes Men\u00fc im Videoplayer"},{"location":"implementation/player/#anpassungen-des-flick-videoplayers","text":"Der Flick Videoplayer stellt zwei anpassbare Klassen zur Verf\u00fcgung ( DataManager und CustomOrientationControls ), was wir f\u00fcr dieses Men\u00fc genutzt haben. Diese \u00c4nderungen reichten jedoch nicht aus und daher mussten wir interne Klassen des Players ver\u00e4ndern und ihn daf\u00fcr lokal in das Projekt integrieren. Dies war erforderlich, um zu gew\u00e4hrleisten, dass die Wiedergabeposition unver\u00e4ndert blieb, wenn die Aufl\u00f6sung oder die Ansicht gewechselt wurde. Im Ordner flick_video_player/lib/src/manager wurden an folgenden Stellen \u00c4nderungen vorgenommen: flick_manager.dart: handleChangeVideo( ) video_manager.dart: _handleChangeVideo( ), _changeVideo( ) Die \u00c4nderungen sind jeweils mit dem Stichwort \"CHANGED\" markiert.","title":"Anpassungen des Flick Videoplayers"},{"location":"implementation/player/#http-live-streaming-hls","text":"Wir verwenden in der App HTTP Live Streaming (HLS) . F\u00fcr das Abspielen eines Videos erh\u00e4lt der Player eine Liste mit URLs zu Masterplaylisten. Gibt es f\u00fcr das Video mehrere Ansichten, sind es mehrere Masterplaylisten. Innerhalb dieser Masterplaylisten gibt es wiederum mehrere Variantenplaylists f\u00fcr die einzelnen Aufl\u00f6sungen. Um diese auszulesen, verwenden wir das Paket flutter_hls_parser .","title":"HTTP Live Streaming (HLS)"},{"location":"implementation/player/#restriktionen","text":"Momentan ist es leider nicht m\u00f6glich mehrzeilige Untertitel anzuzeigen und das Men\u00fc des Players im Vollbildmodus zu nutzen. Weitere Informationen hierzu finden sich im Bereich Restriktionen .","title":"Restriktionen"}]}