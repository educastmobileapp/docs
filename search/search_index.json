{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen zur educast.nrw-App Dokumentation Auf dieser Website finden Sie die technische Dokumentation der Mobileapp educast.nrw. Um einen komfortablen, mobilen Zugriff auf mit educast.nrw bereitgestellte Inhalte durch Studierende zu erm\u00f6glichen, wurde die mobile Anwendung entwickelt, die hier dokumentiert wird. Zentrale Ansichten der App educast.nrw Die Weiterentwicklung videobasierter Lehre \u00fcbernimmt in Nordrhein-Westfalen das Projekt educast.nrw . Als Teil des Programms \u201eDigitale Hochschule NRW\u201c wird es durch das Land NRW gef\u00f6rdert. Das educast.nrw-Konsortium bilden die Universit\u00e4t Duisburg-Essen, die Universit\u00e4t zu K\u00f6ln und konsortialf\u00fchrend die Westf\u00e4lische Wilhelms-Universit\u00e4t M\u00fcnster. educast.nrw nutzt f\u00fcr die Erstellung, Verwaltung und Bereitstellung der Videoinhalte die Software Opencast . Opencast baut Systeme f\u00fcr das Hochschulumfeld mithilfe von Entwicklern internationaler Hochschulen und Organisationen. Die Systeme sind nach dem Open-Source-Ansatz frei verf\u00fcgbar. Die Video App soll in Zukunft im Rahmen von educast.nrw eingesetzt werden und auch der Opencast-Community als Open-Source-Software zur Verf\u00fcgung stehen. Struktur der Dokumentation Auf dieser Seite werden nachfolgend die Motivation, sowie die daraus abgeleiteten Anforderungen erl\u00e4utert. F\u00fcr die weitere Orientierung beachten Sie bitte folgende Auflistung. Die Navigation erfolgt \u00fcber die Navigationsleiste links. Setup des Systems Userguide Funktionsweise des Logins Restriktionen und Limitationen der App Ausblick Motivation Im Mittelpunkt der Entwicklung stand es, den Endnutzern, also Studierenden, einen komfortablen, simplen und modernen Weg zu bieten, auch \u00fcber Mobilger\u00e4te auf Vorlesungsvideos zugreifen zu k\u00f6nnen. Bei YouTube oder Streaminganbietern wie Netflix und Amazon Prime, sind Smartphone-Apps l\u00e4ngst ein g\u00e4ngiger und einfacher Weg auf die Angebote zuzugreifen. F\u00fcr digitale Vorlesungen gilt das nicht, der Zugriff ist unn\u00f6tig aufwendig und umst\u00e4ndlich. Ein weiteres Problem entsteht durch infrastrukturelle Unzul\u00e4nglichkeiten beim Netzausbau in NRW bzw. Deutschland. Vorlesungen sollten f\u00fcr den Konsum unterwegs auch Offline zur Verf\u00fcgung stehen, damit Internetunterbrechungen nicht zu Streamingabbruch f\u00fchren und Datenvolumen gespart werden kann. Die abgeleiteten Anforderungen k\u00f6nnen hier eingesehen werden.","title":"Home"},{"location":"#willkommen-zur-educastnrw-app-dokumentation","text":"Auf dieser Website finden Sie die technische Dokumentation der Mobileapp educast.nrw. Um einen komfortablen, mobilen Zugriff auf mit educast.nrw bereitgestellte Inhalte durch Studierende zu erm\u00f6glichen, wurde die mobile Anwendung entwickelt, die hier dokumentiert wird. Zentrale Ansichten der App","title":"Willkommen zur educast.nrw-App Dokumentation"},{"location":"#educastnrw","text":"Die Weiterentwicklung videobasierter Lehre \u00fcbernimmt in Nordrhein-Westfalen das Projekt educast.nrw . Als Teil des Programms \u201eDigitale Hochschule NRW\u201c wird es durch das Land NRW gef\u00f6rdert. Das educast.nrw-Konsortium bilden die Universit\u00e4t Duisburg-Essen, die Universit\u00e4t zu K\u00f6ln und konsortialf\u00fchrend die Westf\u00e4lische Wilhelms-Universit\u00e4t M\u00fcnster. educast.nrw nutzt f\u00fcr die Erstellung, Verwaltung und Bereitstellung der Videoinhalte die Software Opencast . Opencast baut Systeme f\u00fcr das Hochschulumfeld mithilfe von Entwicklern internationaler Hochschulen und Organisationen. Die Systeme sind nach dem Open-Source-Ansatz frei verf\u00fcgbar. Die Video App soll in Zukunft im Rahmen von educast.nrw eingesetzt werden und auch der Opencast-Community als Open-Source-Software zur Verf\u00fcgung stehen.","title":"educast.nrw"},{"location":"#struktur-der-dokumentation","text":"Auf dieser Seite werden nachfolgend die Motivation, sowie die daraus abgeleiteten Anforderungen erl\u00e4utert. F\u00fcr die weitere Orientierung beachten Sie bitte folgende Auflistung. Die Navigation erfolgt \u00fcber die Navigationsleiste links. Setup des Systems Userguide Funktionsweise des Logins Restriktionen und Limitationen der App Ausblick","title":"Struktur der Dokumentation"},{"location":"#motivation","text":"Im Mittelpunkt der Entwicklung stand es, den Endnutzern, also Studierenden, einen komfortablen, simplen und modernen Weg zu bieten, auch \u00fcber Mobilger\u00e4te auf Vorlesungsvideos zugreifen zu k\u00f6nnen. Bei YouTube oder Streaminganbietern wie Netflix und Amazon Prime, sind Smartphone-Apps l\u00e4ngst ein g\u00e4ngiger und einfacher Weg auf die Angebote zuzugreifen. F\u00fcr digitale Vorlesungen gilt das nicht, der Zugriff ist unn\u00f6tig aufwendig und umst\u00e4ndlich. Ein weiteres Problem entsteht durch infrastrukturelle Unzul\u00e4nglichkeiten beim Netzausbau in NRW bzw. Deutschland. Vorlesungen sollten f\u00fcr den Konsum unterwegs auch Offline zur Verf\u00fcgung stehen, damit Internetunterbrechungen nicht zu Streamingabbruch f\u00fchren und Datenvolumen gespart werden kann. Die abgeleiteten Anforderungen k\u00f6nnen hier eingesehen werden.","title":"Motivation"},{"location":"anforderungen/","text":"Anforderungen In diesem Abschnitt sind die Anforderungen an die App aufgelistet. Die Hauptaufgabe der App ist das Abspielen von Vorlesungsvideos auf dem mobilen Endger\u00e4t. Die Videos sind auf dem educast.nrw Server der jeweiligen Hochschule der Studierenden gespeichert. Von den Servern aus werden die Inhalte beim abspielen der Videos geladen. Der Player Der Player ist ein Zentraler Bestandteil der App und halt viele Funktionen, neben dem abspielen und pausieren der Videos. So kann man die Qualit\u00e4t und die Wiedergabegeschwindigkeit \u00e4ndern. Mit einem Doppelklick auf dem Bildschirm auf der linken bzw. rechten Seite l\u00e4sst sich das Video vor bzw. zur\u00fcck spulen, so dass die Studierenden sich z.B. komplexe Inhalte einfach nochmal anschauen k\u00f6nnen. Der Videofortschritt wird auch Ger\u00e4te\u00fcbergreifend gespeichert. Nach einer Pause k\u00f6nnen die Studierenden genau an der richtigen Position das Video weiter schauen. Bei der Aufzeichnung von Vorlesungen gibt es oft zwei Ansichten. Eine Ansicht von den Folien und eine von der Vortragenden Person. Deshalb gibt es eine Funktion zum Wechseln der Ansicht. Login Des Weiteren ist eine Anmeldefunktion ben\u00f6tigt. Hier melden sich die Studierenden mit ihrer Hochschulkennung und ihren Passw\u00f6rtern an. Dieselben Anmeldedaten, die auch f\u00fcr andere Hochschule bezogene IT-Dienste ben\u00f6tigt sind. So ist sichergestellt das nur berechtigte Personen die App nutzen k\u00f6nnen. Au\u00dferdem k\u00f6nnen individuelle Einstellungen gespeichert werden. Zuletzt erm\u00f6glicht die Anmeldung die Identifizierung der Hochschulzugeh\u00f6rigkeit der Studierenden. Dies ist f\u00fcr die Auswahl des richtigen educast.nrw Servers n\u00f6tig. Die Studierenden bleiben 6 Monate lang angemeldet und m\u00fcssen sich nicht jeden Tag neu anmelden. Au\u00dferdem k\u00f6nnen die Studierenden in den Einstellungen ihren Namen und ihre E-Mail einsehen, um so festzustellen wer gerade angemeldet ist. Einschreibeschl\u00fcssel Da ein Gro\u00dfteil der Vorlesungen und somit auch der Vorlesungsvideos mit einem Einschreibeschl\u00fcssen gesichert sind, ist eine sichere Funktion zum Abfragen des Einschreibeschl\u00fcssells notwendig. Benutzeroberfl\u00e4che Au\u00dferdem wird eine intuitive UI Struktur ben\u00f6tigt, mit der durch die App navigieren werden kann. Sprachauswahl F\u00fcr die Barrierefreiheit der App ist die Option der Sprachauswahl wichtig. In den Einstellungen kann zwischen Deutsch und Englisch gewechselt werden. So wird die Nutzung der App auch internationalen Studenten erm\u00f6glicht. Download Eine weitere Wichtige Funktion, ist das Downloaden der Videos und sp\u00e4tere abspielen ohne eine Internetverbindung. Dies erm\u00f6glicht zum Beispiel das Schauen von Vorlesungsvideos in der Deutschen Bahn unabh\u00e4ngig von einer stabilen Internetverbindung. Ein entscheidender Vorteil der Mobilen App, im Vergleich zum Anschauen der Videos im Browser. Im Browser ist kein Download m\u00f6glich, da nicht sichergestellt werden kann, dass die Videos nicht an unbefugte weitergegeben werden. Bei der educast App werden die Videos in einem sicheren App spezifischen Bereich gespeichert, so dass nicht au\u00dferhalb der App darauf zugegriffen werden kann. Es ist m\u00f6glich einzelne Videos zu downloaden, sowie alle Videos einer Vorlesung zusammen. In den Einstellungen kann man die Videos wieder l\u00f6schen und es gibt auch die M\u00f6glichkeit alle Videos auf einmal zu l\u00f6schen. Performance Auch die Performance der App ist wichtig. Es wird vermieden redundante Requests an den Server zu senden, stattdessen werden Informationen die sp\u00e4ter noch gebraucht werden im App internen Cache gehalten. So werden zum Beispiel die Thumbnails der Vorlesungsvideos gecached. Dies geschieht auf Grund ihrer Gr\u00f6\u00dfe und da sie f\u00fcr die Vorschau in der Home View ben\u00f6tigt werden. Sodass diese nicht bei jedem Neustart der App neu heruntergeladen werden m\u00fcssen. Dadurch wird Internetbandbreite eingespart und jene Elemente k\u00f6nnen schneller angezeigt werden. Au\u00dferdem werden auch viele Requests im Backend f\u00fcr 15 Minuten gecached. So wird die Antwort Zeit von h\u00e4ufigen Anfragen beschleunigt und Rechenleistung vom Server geschont, wodurch gr\u00f6\u00dfere Nutzerzahlen weniger problematisch sind.","title":"Anforderungen"},{"location":"anforderungen/#anforderungen","text":"In diesem Abschnitt sind die Anforderungen an die App aufgelistet. Die Hauptaufgabe der App ist das Abspielen von Vorlesungsvideos auf dem mobilen Endger\u00e4t. Die Videos sind auf dem educast.nrw Server der jeweiligen Hochschule der Studierenden gespeichert. Von den Servern aus werden die Inhalte beim abspielen der Videos geladen.","title":"Anforderungen"},{"location":"anforderungen/#der-player","text":"Der Player ist ein Zentraler Bestandteil der App und halt viele Funktionen, neben dem abspielen und pausieren der Videos. So kann man die Qualit\u00e4t und die Wiedergabegeschwindigkeit \u00e4ndern. Mit einem Doppelklick auf dem Bildschirm auf der linken bzw. rechten Seite l\u00e4sst sich das Video vor bzw. zur\u00fcck spulen, so dass die Studierenden sich z.B. komplexe Inhalte einfach nochmal anschauen k\u00f6nnen. Der Videofortschritt wird auch Ger\u00e4te\u00fcbergreifend gespeichert. Nach einer Pause k\u00f6nnen die Studierenden genau an der richtigen Position das Video weiter schauen. Bei der Aufzeichnung von Vorlesungen gibt es oft zwei Ansichten. Eine Ansicht von den Folien und eine von der Vortragenden Person. Deshalb gibt es eine Funktion zum Wechseln der Ansicht.","title":"Der Player"},{"location":"anforderungen/#login","text":"Des Weiteren ist eine Anmeldefunktion ben\u00f6tigt. Hier melden sich die Studierenden mit ihrer Hochschulkennung und ihren Passw\u00f6rtern an. Dieselben Anmeldedaten, die auch f\u00fcr andere Hochschule bezogene IT-Dienste ben\u00f6tigt sind. So ist sichergestellt das nur berechtigte Personen die App nutzen k\u00f6nnen. Au\u00dferdem k\u00f6nnen individuelle Einstellungen gespeichert werden. Zuletzt erm\u00f6glicht die Anmeldung die Identifizierung der Hochschulzugeh\u00f6rigkeit der Studierenden. Dies ist f\u00fcr die Auswahl des richtigen educast.nrw Servers n\u00f6tig. Die Studierenden bleiben 6 Monate lang angemeldet und m\u00fcssen sich nicht jeden Tag neu anmelden. Au\u00dferdem k\u00f6nnen die Studierenden in den Einstellungen ihren Namen und ihre E-Mail einsehen, um so festzustellen wer gerade angemeldet ist.","title":"Login"},{"location":"anforderungen/#einschreibeschlussel","text":"Da ein Gro\u00dfteil der Vorlesungen und somit auch der Vorlesungsvideos mit einem Einschreibeschl\u00fcssen gesichert sind, ist eine sichere Funktion zum Abfragen des Einschreibeschl\u00fcssells notwendig.","title":"Einschreibeschl\u00fcssel"},{"location":"anforderungen/#benutzeroberflache","text":"Au\u00dferdem wird eine intuitive UI Struktur ben\u00f6tigt, mit der durch die App navigieren werden kann.","title":"Benutzeroberfl\u00e4che"},{"location":"anforderungen/#sprachauswahl","text":"F\u00fcr die Barrierefreiheit der App ist die Option der Sprachauswahl wichtig. In den Einstellungen kann zwischen Deutsch und Englisch gewechselt werden. So wird die Nutzung der App auch internationalen Studenten erm\u00f6glicht.","title":"Sprachauswahl"},{"location":"anforderungen/#download","text":"Eine weitere Wichtige Funktion, ist das Downloaden der Videos und sp\u00e4tere abspielen ohne eine Internetverbindung. Dies erm\u00f6glicht zum Beispiel das Schauen von Vorlesungsvideos in der Deutschen Bahn unabh\u00e4ngig von einer stabilen Internetverbindung. Ein entscheidender Vorteil der Mobilen App, im Vergleich zum Anschauen der Videos im Browser. Im Browser ist kein Download m\u00f6glich, da nicht sichergestellt werden kann, dass die Videos nicht an unbefugte weitergegeben werden. Bei der educast App werden die Videos in einem sicheren App spezifischen Bereich gespeichert, so dass nicht au\u00dferhalb der App darauf zugegriffen werden kann. Es ist m\u00f6glich einzelne Videos zu downloaden, sowie alle Videos einer Vorlesung zusammen. In den Einstellungen kann man die Videos wieder l\u00f6schen und es gibt auch die M\u00f6glichkeit alle Videos auf einmal zu l\u00f6schen.","title":"Download"},{"location":"anforderungen/#performance","text":"Auch die Performance der App ist wichtig. Es wird vermieden redundante Requests an den Server zu senden, stattdessen werden Informationen die sp\u00e4ter noch gebraucht werden im App internen Cache gehalten. So werden zum Beispiel die Thumbnails der Vorlesungsvideos gecached. Dies geschieht auf Grund ihrer Gr\u00f6\u00dfe und da sie f\u00fcr die Vorschau in der Home View ben\u00f6tigt werden. Sodass diese nicht bei jedem Neustart der App neu heruntergeladen werden m\u00fcssen. Dadurch wird Internetbandbreite eingespart und jene Elemente k\u00f6nnen schneller angezeigt werden. Au\u00dferdem werden auch viele Requests im Backend f\u00fcr 15 Minuten gecached. So wird die Antwort Zeit von h\u00e4ufigen Anfragen beschleunigt und Rechenleistung vom Server geschont, wodurch gr\u00f6\u00dfere Nutzerzahlen weniger problematisch sind.","title":"Performance"},{"location":"database/","text":"Datenbank Zum Betrieb des Backends ist ein relationales Datenbanksystem notwendig, in dem die n\u00f6tigen Daten zum Operieren gespeichert werden k\u00f6nnen. Daher ist es n\u00f6tig, dass Zugriff auf eine MySQL-Datenbank besteht. Konfiguration Die Login-Daten f\u00fcr die Datenbankverbindung m\u00fcssen in der Konfigurationsdatei ( .login.yaml ) angegeben werden. N\u00e4here Informationen k\u00f6nnen in der Setup-Dokumentation gefunden werden. Wichtig: Es wird empfohlen die MySQL-Variablen wait_timeout und interactive_timeout zu erh\u00f6hen, damit eine Dysfunktion des Backends wegen abgebrochener Verbindung ausgeschlossen werden kann. Aufsetzen Zur Inbetriebnahme ist nach der richtigen Konfiguration der Login-Daten und der richtigen Rechte Zuteilung Nichts weiter zutun. Alle Tabellen werden automatisch erstellt. Daten Im Folgenden ist erl\u00e4utert, welche Daten gespeichert werden. Es handelt sich haupts\u00e4chlich um Daten zur Erm\u00f6glichung des Abonnieren-Features. Modell der Datenbanktabellen als UML-Klassendiagramm (Primary Keys sind unterstrichen) Zum Einen werden eindeutige Nutzerdaten gespeichert, die es erm\u00f6glichen die User beim Login zu identifizieren und einer Universit\u00e4t zuzuordnen. Diese Zuordnung ist technisch notwendig um jedem Studierenden den Zugriff auf die Kurse und Videos seiner Universit\u00e4t zu erm\u00f6glichen. Des Weiteren werden einige technische Daten zum Login-Token gespeichert, genaueres dazu kann hier gefunden werden. Au\u00dferdem werden die vorhandenen Serien gespeichert, was den Zugriff auf verf\u00fcgbare Serien erleichtert und das Verwenden von einem Passwort/Einschreibeschl\u00fcssel zum exklusiven Zugang zu Kursvideos erm\u00f6glicht. Die Tabelle Subscription (engl. f\u00fcr \"Abonnement\") speichert die Relation zwischen Nutzern und den Serien und gibt an, welcher Studierende, welchen Kurs gespeichert hat. Diese Abonnements werden noch in Semester gegliedert, um dem User im Frontend eine einfache Ansicht erm\u00f6glichen zu k\u00f6nnen.","title":"Datenbank"},{"location":"database/#datenbank","text":"Zum Betrieb des Backends ist ein relationales Datenbanksystem notwendig, in dem die n\u00f6tigen Daten zum Operieren gespeichert werden k\u00f6nnen. Daher ist es n\u00f6tig, dass Zugriff auf eine MySQL-Datenbank besteht.","title":"Datenbank"},{"location":"database/#konfiguration","text":"Die Login-Daten f\u00fcr die Datenbankverbindung m\u00fcssen in der Konfigurationsdatei ( .login.yaml ) angegeben werden. N\u00e4here Informationen k\u00f6nnen in der Setup-Dokumentation gefunden werden. Wichtig: Es wird empfohlen die MySQL-Variablen wait_timeout und interactive_timeout zu erh\u00f6hen, damit eine Dysfunktion des Backends wegen abgebrochener Verbindung ausgeschlossen werden kann.","title":"Konfiguration"},{"location":"database/#aufsetzen","text":"Zur Inbetriebnahme ist nach der richtigen Konfiguration der Login-Daten und der richtigen Rechte Zuteilung Nichts weiter zutun. Alle Tabellen werden automatisch erstellt.","title":"Aufsetzen"},{"location":"database/#daten","text":"Im Folgenden ist erl\u00e4utert, welche Daten gespeichert werden. Es handelt sich haupts\u00e4chlich um Daten zur Erm\u00f6glichung des Abonnieren-Features. Modell der Datenbanktabellen als UML-Klassendiagramm (Primary Keys sind unterstrichen) Zum Einen werden eindeutige Nutzerdaten gespeichert, die es erm\u00f6glichen die User beim Login zu identifizieren und einer Universit\u00e4t zuzuordnen. Diese Zuordnung ist technisch notwendig um jedem Studierenden den Zugriff auf die Kurse und Videos seiner Universit\u00e4t zu erm\u00f6glichen. Des Weiteren werden einige technische Daten zum Login-Token gespeichert, genaueres dazu kann hier gefunden werden. Au\u00dferdem werden die vorhandenen Serien gespeichert, was den Zugriff auf verf\u00fcgbare Serien erleichtert und das Verwenden von einem Passwort/Einschreibeschl\u00fcssel zum exklusiven Zugang zu Kursvideos erm\u00f6glicht. Die Tabelle Subscription (engl. f\u00fcr \"Abonnement\") speichert die Relation zwischen Nutzern und den Serien und gibt an, welcher Studierende, welchen Kurs gespeichert hat. Diese Abonnements werden noch in Semester gegliedert, um dem User im Frontend eine einfache Ansicht erm\u00f6glichen zu k\u00f6nnen.","title":"Daten"},{"location":"entwurf/","text":"Entwurf In diesem Abschnitt sind die getroffenen Entwurfsentscheidungen und die Strukturen beschrieben, mit denen die Anforderungen an die App umgesetzt sind. Entwurfsentscheidungen Frontend Nutzung des Flutter-Frameworks! Warum? Vorteile, Nachteile, usw. Das schreibt Tom, oder? Backend Die Aufgabe des Backends ist das Bereitstellen von Daten, die im Frontend gebraucht werden. Hierbei geht es um die Abfrage von verf\u00fcgbaren Serien, Videos, Metadaten sowie das Verwalten von Abonnements. Um diese Aufgabe vollumf\u00e4nglich zu erf\u00fcllen, ist das Entwickeln einer REST-API n\u00f6tig, mit der das Frontend Daten mittels HTTP-Requests anfordern kann. F\u00fcr die Entwicklung unserer REST-API haben wir ein Python-Programm mit dem Webframework Flask entwickelt. Mit einem knappen zeitlichen Rahmen und einem kleinen Team, war bei der Auswahl, der f\u00fcr das Backend verwendeten Programmiersprache, vor allem wichtig, dass wir schnell eine funktionierende Anwendung entwickeln k\u00f6nnen. Da wir zum Teil schon erfahren in der Verwendung von Python waren und die Sprache au\u00dferdem eine im Vergleich sehr leicht zu erlernende Programmiersprache ist, war sie die beste Wahl f\u00fcr uns. Auch bei der Wahl des Webframeworks legten wir dieses Ma\u00df an und entschieden uns f\u00fcr Flask. Flask ist ein light-weight Framework, das relativ minimal ist, sodass schon mit wenig Code ein funktionierender Webserver erstellt werden kann. Struktur Das Backend stellt die Daten f\u00fcr das Frontend bereit. App spezifische Daten, wie z.B. die abonnierten Vorlesungen der Studierenden sind in der Datenbank von dem Backend gespeichert. Diese werden vom Backend aufbereitet und \u00fcber die REST-API Endpunkte bereitgestellt. Die Vorlesungsvideos und die zugeh\u00f6rigen Metadaten hat jede Hochschule auf ihrer educast-Instanz gespeichert. Jede Hochschule, die den educast-Dienst nutzt und folglich so eine Instanz betreibt, kann die App somit nutzen. Das Backend der App ben\u00f6tigt dann die Berechtigung um API-Anfragen an den educast-Server senden zu k\u00f6nnen (siehe Setup ). Diese Informationen werden dann vom Backend f\u00fcr die App spezifisch aufbereitet und mittels der API-Endpunkte des Backends f\u00fcr das Frontend bereitgestellt. In der folgenden Grafik ist diese Struktur veranschaulicht. Serverstruktur API Die API-Endpunkte des Backends sind hier als Swagger Dokumentation zu finden. Es k\u00f6nnen auch Testanfragen mit dem Testuser und Stable Opencast als Datenquelle, gesendet werden. Login Der Login der Studierenden in die App ist mittels \"OpenID Connect\" (OIDC) \u00fcber DFN-AAI umgesetzt. Dieser Prozess wird genauer auf der Login Seite beschrieben.","title":"Entwurf und Struktur"},{"location":"entwurf/#entwurf","text":"In diesem Abschnitt sind die getroffenen Entwurfsentscheidungen und die Strukturen beschrieben, mit denen die Anforderungen an die App umgesetzt sind.","title":"Entwurf"},{"location":"entwurf/#entwurfsentscheidungen","text":"","title":"Entwurfsentscheidungen"},{"location":"entwurf/#frontend","text":"Nutzung des Flutter-Frameworks! Warum? Vorteile, Nachteile, usw. Das schreibt Tom, oder?","title":"Frontend"},{"location":"entwurf/#backend","text":"Die Aufgabe des Backends ist das Bereitstellen von Daten, die im Frontend gebraucht werden. Hierbei geht es um die Abfrage von verf\u00fcgbaren Serien, Videos, Metadaten sowie das Verwalten von Abonnements. Um diese Aufgabe vollumf\u00e4nglich zu erf\u00fcllen, ist das Entwickeln einer REST-API n\u00f6tig, mit der das Frontend Daten mittels HTTP-Requests anfordern kann. F\u00fcr die Entwicklung unserer REST-API haben wir ein Python-Programm mit dem Webframework Flask entwickelt. Mit einem knappen zeitlichen Rahmen und einem kleinen Team, war bei der Auswahl, der f\u00fcr das Backend verwendeten Programmiersprache, vor allem wichtig, dass wir schnell eine funktionierende Anwendung entwickeln k\u00f6nnen. Da wir zum Teil schon erfahren in der Verwendung von Python waren und die Sprache au\u00dferdem eine im Vergleich sehr leicht zu erlernende Programmiersprache ist, war sie die beste Wahl f\u00fcr uns. Auch bei der Wahl des Webframeworks legten wir dieses Ma\u00df an und entschieden uns f\u00fcr Flask. Flask ist ein light-weight Framework, das relativ minimal ist, sodass schon mit wenig Code ein funktionierender Webserver erstellt werden kann.","title":"Backend"},{"location":"entwurf/#struktur","text":"Das Backend stellt die Daten f\u00fcr das Frontend bereit. App spezifische Daten, wie z.B. die abonnierten Vorlesungen der Studierenden sind in der Datenbank von dem Backend gespeichert. Diese werden vom Backend aufbereitet und \u00fcber die REST-API Endpunkte bereitgestellt. Die Vorlesungsvideos und die zugeh\u00f6rigen Metadaten hat jede Hochschule auf ihrer educast-Instanz gespeichert. Jede Hochschule, die den educast-Dienst nutzt und folglich so eine Instanz betreibt, kann die App somit nutzen. Das Backend der App ben\u00f6tigt dann die Berechtigung um API-Anfragen an den educast-Server senden zu k\u00f6nnen (siehe Setup ). Diese Informationen werden dann vom Backend f\u00fcr die App spezifisch aufbereitet und mittels der API-Endpunkte des Backends f\u00fcr das Frontend bereitgestellt. In der folgenden Grafik ist diese Struktur veranschaulicht. Serverstruktur","title":"Struktur"},{"location":"entwurf/#api","text":"Die API-Endpunkte des Backends sind hier als Swagger Dokumentation zu finden. Es k\u00f6nnen auch Testanfragen mit dem Testuser und Stable Opencast als Datenquelle, gesendet werden.","title":"API"},{"location":"entwurf/#login","text":"Der Login der Studierenden in die App ist mittels \"OpenID Connect\" (OIDC) \u00fcber DFN-AAI umgesetzt. Dieser Prozess wird genauer auf der Login Seite beschrieben.","title":"Login"},{"location":"future_work/","text":"Ausblick Basierend auf dem aktuellen Stand soll an dieser Stelle ein Ausblick \u00fcber zuk\u00fcnftige Arbeit an der App und deren Ausbau gegeben werden. Lasttests Behebung der Restriktionen Release in den AppStores Entwicklung zus\u00e4tzlicher Funktionen Zuk\u00fcnftige Features Die folgenden Funktionen sind von uns ausgew\u00e4hlte Beispiele, die M\u00f6glichkeiten f\u00fcr den weiteren Entwicklungsverlauf der educast.nrw-App darstellen sollen. Zu diesen geh\u00f6ren: Vorschaubilder Kapitel Tablet Zoomen Vorschaubilder Es gibt die M\u00f6glichkeit \u00fcber die Zeitleiste des Videos vor- und zur\u00fcckzuspulen. Ein zuk\u00fcnftiges Feature k\u00f6nnte das Anzeigen kleiner Vorschaubilder dabei sein, die dem User einen Einblick in die Szene zum jeweiligen Zeitpunkt im Video geben. Solch eine Funktion k\u00f6nnte den Studierenden in der mobilen Anwendung von educast.nrw behilflich sein, um eine passende Szene zu finden und dort hin zu navigieren. Kapitel Auf der Website Youtube kann der Erstellende des Videos sich daf\u00fcr entscheiden Kapitel hinzuzuf\u00fcgen. Der User sieht diese in der Zeitleiste. Die Abschnitte werden mit Abtrennungen gegliedert und beim navigieren zu diesen Abtrennungen taucht der Name des Kapitels auf. Dies w\u00e4re auch f\u00fcr Nutzer der App n\u00fctzlich, um verschiedene Kapitel identifizieren zu k\u00f6nnen und z.B. f\u00fcr das Wiederholen von Inhalten gezielt zu einem bestimmten Kapitel springen zu k\u00f6nnen. Dadurch w\u00fcrden die Videos \u00fcbersichtlicher und somit gezielteres Lernen erm\u00f6glicht. Tablet Die Video-App ist zwar bereits jetzt auch auf Tablets vollumf\u00e4nglich nutzbar, aber sie ist bisher nur auf die Gr\u00f6\u00dfe von Smartphones optimiert. Viele Studierende w\u00fcrden die Option auf dem Tablet zu lernen sehr wahrscheinlich nutzen und deswegen sollte auch eine Tablet-optimierte Version erstellt werden. Diese w\u00fcrde daf\u00fcr sorgen, dass der auf einem Tablet verf\u00fcgbare, zus\u00e4tzliche Platz sinnvoll genutzt werden k\u00f6nnte. Ein Beispiel f\u00fcr frei verf\u00fcgbaren Platz findet sich im Player. Denn educast.nrw bietet die Funktion mehrere Videos parallel laufen zu lassen, wie z.B. eine Dozierendenansicht parallel zur Folienansicht. Auf dem Smartphone werden die Ansichten aufgrund des kleinen Bildschirms separat angezeigt und es kann zwischen ihnen gewechselt werden. Auf dem Tablet hingegen k\u00f6nnte eine Picture-in-Picture Ansicht genutzt werden. Das bedeutet, es k\u00f6nnten zwei Videos gleichzeitig auf einem Bildschirm abgespielt werden, w\u00e4hrend das eine Video in voller Gr\u00f6\u00dfe verf\u00fcgbar und das andere klein zu sehen ist. Au\u00dferdem k\u00f6nnte die Seitenleiste im Home-Bildschirm permanent bestehen bleiben wodurch die n\u00f6tigen Schritte bei der Navigation durch die App verringert werden k\u00f6nnten. Zoomen Die Ansicht auf vielen Smartphones ist klein und Schriften in Videos k\u00f6nnen unleserlich werden. Um kleine Schriften dennoch lesen zu k\u00f6nnen, k\u00f6nnte mit eine Zoom-Funktion umgesetzt werden. Damit k\u00f6nnten Studierende in unleserliche Folien hineinzoomen. Das w\u00e4re vor allem bei hilfreich, wenn Dozierende Dokumente zeigen oder Tafelbilder erstellen, die klein und schwierig zu lesen sind. Dies ist eine kleine Auswahl an M\u00f6glichkeiten und Ideen, wie die App k\u00fcnftig weiterentwickelt werden k\u00f6nnte.","title":"Ausblick"},{"location":"future_work/#ausblick","text":"Basierend auf dem aktuellen Stand soll an dieser Stelle ein Ausblick \u00fcber zuk\u00fcnftige Arbeit an der App und deren Ausbau gegeben werden. Lasttests Behebung der Restriktionen Release in den AppStores Entwicklung zus\u00e4tzlicher Funktionen","title":"Ausblick"},{"location":"future_work/#zukunftige-features","text":"Die folgenden Funktionen sind von uns ausgew\u00e4hlte Beispiele, die M\u00f6glichkeiten f\u00fcr den weiteren Entwicklungsverlauf der educast.nrw-App darstellen sollen. Zu diesen geh\u00f6ren: Vorschaubilder Kapitel Tablet Zoomen","title":"Zuk\u00fcnftige Features"},{"location":"future_work/#vorschaubilder","text":"Es gibt die M\u00f6glichkeit \u00fcber die Zeitleiste des Videos vor- und zur\u00fcckzuspulen. Ein zuk\u00fcnftiges Feature k\u00f6nnte das Anzeigen kleiner Vorschaubilder dabei sein, die dem User einen Einblick in die Szene zum jeweiligen Zeitpunkt im Video geben. Solch eine Funktion k\u00f6nnte den Studierenden in der mobilen Anwendung von educast.nrw behilflich sein, um eine passende Szene zu finden und dort hin zu navigieren.","title":"Vorschaubilder"},{"location":"future_work/#kapitel","text":"Auf der Website Youtube kann der Erstellende des Videos sich daf\u00fcr entscheiden Kapitel hinzuzuf\u00fcgen. Der User sieht diese in der Zeitleiste. Die Abschnitte werden mit Abtrennungen gegliedert und beim navigieren zu diesen Abtrennungen taucht der Name des Kapitels auf. Dies w\u00e4re auch f\u00fcr Nutzer der App n\u00fctzlich, um verschiedene Kapitel identifizieren zu k\u00f6nnen und z.B. f\u00fcr das Wiederholen von Inhalten gezielt zu einem bestimmten Kapitel springen zu k\u00f6nnen. Dadurch w\u00fcrden die Videos \u00fcbersichtlicher und somit gezielteres Lernen erm\u00f6glicht.","title":"Kapitel"},{"location":"future_work/#tablet","text":"Die Video-App ist zwar bereits jetzt auch auf Tablets vollumf\u00e4nglich nutzbar, aber sie ist bisher nur auf die Gr\u00f6\u00dfe von Smartphones optimiert. Viele Studierende w\u00fcrden die Option auf dem Tablet zu lernen sehr wahrscheinlich nutzen und deswegen sollte auch eine Tablet-optimierte Version erstellt werden. Diese w\u00fcrde daf\u00fcr sorgen, dass der auf einem Tablet verf\u00fcgbare, zus\u00e4tzliche Platz sinnvoll genutzt werden k\u00f6nnte. Ein Beispiel f\u00fcr frei verf\u00fcgbaren Platz findet sich im Player. Denn educast.nrw bietet die Funktion mehrere Videos parallel laufen zu lassen, wie z.B. eine Dozierendenansicht parallel zur Folienansicht. Auf dem Smartphone werden die Ansichten aufgrund des kleinen Bildschirms separat angezeigt und es kann zwischen ihnen gewechselt werden. Auf dem Tablet hingegen k\u00f6nnte eine Picture-in-Picture Ansicht genutzt werden. Das bedeutet, es k\u00f6nnten zwei Videos gleichzeitig auf einem Bildschirm abgespielt werden, w\u00e4hrend das eine Video in voller Gr\u00f6\u00dfe verf\u00fcgbar und das andere klein zu sehen ist. Au\u00dferdem k\u00f6nnte die Seitenleiste im Home-Bildschirm permanent bestehen bleiben wodurch die n\u00f6tigen Schritte bei der Navigation durch die App verringert werden k\u00f6nnten.","title":"Tablet"},{"location":"future_work/#zoomen","text":"Die Ansicht auf vielen Smartphones ist klein und Schriften in Videos k\u00f6nnen unleserlich werden. Um kleine Schriften dennoch lesen zu k\u00f6nnen, k\u00f6nnte mit eine Zoom-Funktion umgesetzt werden. Damit k\u00f6nnten Studierende in unleserliche Folien hineinzoomen. Das w\u00e4re vor allem bei hilfreich, wenn Dozierende Dokumente zeigen oder Tafelbilder erstellen, die klein und schwierig zu lesen sind. Dies ist eine kleine Auswahl an M\u00f6glichkeiten und Ideen, wie die App k\u00fcnftig weiterentwickelt werden k\u00f6nnte.","title":"Zoomen"},{"location":"login/","text":"Login\u200b Im Folgenden werden die technischen Hintergr\u00fcnde des Loginprozesses beschrieben und wie damit eine sichere Kommunikation gew\u00e4hrleistet wird. Im Userguide wird genauer erl\u00e4utert, wie man als Nutzer:in durch den Loginprozess navigiert. Beim \u00d6ffnen der App wird gepr\u00fcft, ob lokal bereits ein Token hinterlegt ist. Sofern dies der Fall ist, \u00f6ffnet sich automatisch der Homescreen. Andernfalls, wird der:die Studierende zum Anmelden aufgefordert und der Loginprozess angesto\u00dfen. Loginprozess Informationsaustausch zwischen dem Frontend, Backend, OIDC Proxy und DFN-AAI Durch Ausl\u00f6sen des Loginprozesses wird der OpenIDConnect (OIDC) Flow nach der OIDC-Spezifikation angesto\u00dfen. OIDC ist die Identifikationsschicht, welche auf dem Autorisierungs-Framework OAuth 2.0 aufbaut. Ausgef\u00fchrt wird dieser Flow von einem OIDC-Proxy, welcher unserem Projekt zur Verf\u00fcgung gestellt wurde und der in dem OIDC-Flow die Relying-Party darstellt. OIDC-Provider, also die Partei welche die Authentifizierung der User \u00fcbernimmt und dem die Relying-Party vertraut, ist hier die Authentifikations- und Autorisierungs-Infrastruktur des Deutschen Forschungsnetzes (DFN-AAI). Da alle beteiligten Universit\u00e4ten und Fachhochschulen Teil der DFN-AAI sind, melden sich die Studierenden mit den Zugangsdaten ihrer Institution an. Bei erfolgreichem Ablauf des OIDC-Flows, erh\u00e4lt unser Backend ein Token mit G\u00fcltigkeit von einem Tag, welches alle relevanten Nutzerdaten enth\u00e4lt. Unter anderem enth\u00e4lt es die Domain der Universit\u00e4t oder Fachhochschule des:der Studierenden, was die Zuordnung der Studierenden zur jeweiligen Universit\u00e4t oder Fachhochschule erm\u00f6glicht. Dies ist wichtig f\u00fcr die Kommunikation zwischen dem App-Backend und educast.nrw, wie Sie hier genauer nachlesen k\u00f6nnen. Welche Nutzerdaten unser Backend dauerhaft speichert, finden Sie hier . Zur weiteren Kommunikation wird dem Frontend daraufhin ein sechs Monate g\u00fcltiges Token im JSON Web Token (JWT) Format ausgestellt. Dieses Token wird bei jeder Anfrage ans App-Backend im HTTP-Header backend-ID-token mitgeschickt, um eine Identifikation des Nutzers zu erm\u00f6glichen. Jegliche Kommunikation l\u00e4uft au\u00dferdem \u00fcber HTTPS, um ein Abfangen und Entschl\u00fcsseln des Token auf dem Transportweg zu verhindern. Tokenspeicherung Um eine sichere Speicherung des Token zu gew\u00e4hrleisten, nutzen wir das Flutter Plugin flutter_secure_storage . Dieses speichert den Token in der Keychain von iOS bzw. in den EncryptedSharedPreferences von Android, sodass der Token jeweils verschl\u00fcsselt in den f\u00fcr sensible Daten vorgesehenen key-value stores gesichert wird. JWKS Endpunkt Damit die Signatur des JWTs verifiziert werden kann, haben wir au\u00dferdem einen JSON Web Key Set (JWKS) Endpunkt eingerichtet. Unter diesem Link ist unser JWKS Endpunkt zu finden und damit der \u00f6ffentliche Schl\u00fcssel zur Verifikation der Signatur unseres Backends abrufbar. Durch die in der OIDC-Spezifikation (10.1.1) empfohlenen Rotation von asymmetrischen Schl\u00fcsselpaaren stehen dort ggf. mehrere Schl\u00fcssel, wobei der Schl\u00fcssel mit der h\u00f6chsten ID der aktuellste sein sollte. Die ID des Schl\u00fcsselpaares wird aber auch im Header kid des JWTs mitgeschickt. Einf\u00fcgen eines neuen Public Keys Wenn Sie als Administrator ein neues Schl\u00fcsselpaar generiert haben, steht Ihnen die Funktion add_new_key in der login/__init__.py Datei zur Verf\u00fcgung. Diese f\u00fcgt Ihren \u00f6ffentlichen Schl\u00fcssel automatisch in den JWKS Endpunkt ein. Logout In den Einstellungen der App k\u00f6nnen sich Studierende auch wieder abmelden. Dadurch wird der lokal gespeicherte Token gel\u00f6scht und der:die Studierende auf die Startseite weitergeleitet, sodass ein erneutes Anmelden notwendig ist, um auf die Funktionen der App zuzugreifen.","title":"Login"},{"location":"login/#login","text":"Im Folgenden werden die technischen Hintergr\u00fcnde des Loginprozesses beschrieben und wie damit eine sichere Kommunikation gew\u00e4hrleistet wird. Im Userguide wird genauer erl\u00e4utert, wie man als Nutzer:in durch den Loginprozess navigiert. Beim \u00d6ffnen der App wird gepr\u00fcft, ob lokal bereits ein Token hinterlegt ist. Sofern dies der Fall ist, \u00f6ffnet sich automatisch der Homescreen. Andernfalls, wird der:die Studierende zum Anmelden aufgefordert und der Loginprozess angesto\u00dfen.","title":"Login\u200b"},{"location":"login/#loginprozess","text":"Informationsaustausch zwischen dem Frontend, Backend, OIDC Proxy und DFN-AAI Durch Ausl\u00f6sen des Loginprozesses wird der OpenIDConnect (OIDC) Flow nach der OIDC-Spezifikation angesto\u00dfen. OIDC ist die Identifikationsschicht, welche auf dem Autorisierungs-Framework OAuth 2.0 aufbaut. Ausgef\u00fchrt wird dieser Flow von einem OIDC-Proxy, welcher unserem Projekt zur Verf\u00fcgung gestellt wurde und der in dem OIDC-Flow die Relying-Party darstellt. OIDC-Provider, also die Partei welche die Authentifizierung der User \u00fcbernimmt und dem die Relying-Party vertraut, ist hier die Authentifikations- und Autorisierungs-Infrastruktur des Deutschen Forschungsnetzes (DFN-AAI). Da alle beteiligten Universit\u00e4ten und Fachhochschulen Teil der DFN-AAI sind, melden sich die Studierenden mit den Zugangsdaten ihrer Institution an. Bei erfolgreichem Ablauf des OIDC-Flows, erh\u00e4lt unser Backend ein Token mit G\u00fcltigkeit von einem Tag, welches alle relevanten Nutzerdaten enth\u00e4lt. Unter anderem enth\u00e4lt es die Domain der Universit\u00e4t oder Fachhochschule des:der Studierenden, was die Zuordnung der Studierenden zur jeweiligen Universit\u00e4t oder Fachhochschule erm\u00f6glicht. Dies ist wichtig f\u00fcr die Kommunikation zwischen dem App-Backend und educast.nrw, wie Sie hier genauer nachlesen k\u00f6nnen. Welche Nutzerdaten unser Backend dauerhaft speichert, finden Sie hier . Zur weiteren Kommunikation wird dem Frontend daraufhin ein sechs Monate g\u00fcltiges Token im JSON Web Token (JWT) Format ausgestellt. Dieses Token wird bei jeder Anfrage ans App-Backend im HTTP-Header backend-ID-token mitgeschickt, um eine Identifikation des Nutzers zu erm\u00f6glichen. Jegliche Kommunikation l\u00e4uft au\u00dferdem \u00fcber HTTPS, um ein Abfangen und Entschl\u00fcsseln des Token auf dem Transportweg zu verhindern.","title":"Loginprozess"},{"location":"login/#tokenspeicherung","text":"Um eine sichere Speicherung des Token zu gew\u00e4hrleisten, nutzen wir das Flutter Plugin flutter_secure_storage . Dieses speichert den Token in der Keychain von iOS bzw. in den EncryptedSharedPreferences von Android, sodass der Token jeweils verschl\u00fcsselt in den f\u00fcr sensible Daten vorgesehenen key-value stores gesichert wird.","title":"Tokenspeicherung"},{"location":"login/#jwks-endpunkt","text":"Damit die Signatur des JWTs verifiziert werden kann, haben wir au\u00dferdem einen JSON Web Key Set (JWKS) Endpunkt eingerichtet. Unter diesem Link ist unser JWKS Endpunkt zu finden und damit der \u00f6ffentliche Schl\u00fcssel zur Verifikation der Signatur unseres Backends abrufbar. Durch die in der OIDC-Spezifikation (10.1.1) empfohlenen Rotation von asymmetrischen Schl\u00fcsselpaaren stehen dort ggf. mehrere Schl\u00fcssel, wobei der Schl\u00fcssel mit der h\u00f6chsten ID der aktuellste sein sollte. Die ID des Schl\u00fcsselpaares wird aber auch im Header kid des JWTs mitgeschickt.","title":"JWKS Endpunkt"},{"location":"login/#einfugen-eines-neuen-public-keys","text":"Wenn Sie als Administrator ein neues Schl\u00fcsselpaar generiert haben, steht Ihnen die Funktion add_new_key in der login/__init__.py Datei zur Verf\u00fcgung. Diese f\u00fcgt Ihren \u00f6ffentlichen Schl\u00fcssel automatisch in den JWKS Endpunkt ein.","title":"Einf\u00fcgen eines neuen Public Keys"},{"location":"login/#logout","text":"In den Einstellungen der App k\u00f6nnen sich Studierende auch wieder abmelden. Dadurch wird der lokal gespeicherte Token gel\u00f6scht und der:die Studierende auf die Startseite weitergeleitet, sodass ein erneutes Anmelden notwendig ist, um auf die Funktionen der App zuzugreifen.","title":"Logout"},{"location":"restriktionen/","text":"Restriktionen Wie jede andere Software auch, unterliegt auch die mobile educast.nrw App gewissen Restriktionen, beziehungsweise konnten ein paar wenige Funktionalit\u00e4ten leider (noch) nicht so umgesetzt werden, wie erw\u00fcnscht. Grunds\u00e4tzlich ist die Aktualisierbarkeit des Flick Videoplayers eingeschr\u00e4nkt, da dessen Paket lokal integriert und leicht ver\u00e4ndert werden musste, um es auf unsere Anforderungen anzupassen. Dies bedeutet, dass Updates des Flick Videplayers nicht automatisiert in unsere App \u00fcbernommen werden k\u00f6nnen, sondern manuell in den Code eingef\u00fcgt werden m\u00fcssen. Weitere Informationen zum Player finden Sie hier . Dar\u00fcber hinaus ist das Ausw\u00e4hlen des Player Men\u00fcs bisher nur im Hochformat m\u00f6glich. Dies ist eine Funktion, welche nicht von dem Flick Videoplayer bereitgestellt wird. Auch nach ausf\u00fchrlichem Suchen und Austesten diverser Workarounds ist es uns leider nicht gelungen dieses Problem zu l\u00f6sen. Ein m\u00f6glicher weiterer Ansatz w\u00e4re der Austausch der Dropdown Buttons durch Custom Dropdownbuttons des Pakets cool_dropdown . Weitere Informationen zum Player finden Sie hier . Au\u00dferdem sind Untertitel nur einzeilig m\u00f6glich. Mehrzeilige Untertitel werden demnach in einer Zeile dargestellt. Der Fehler liegt in der Klasse WebVttCaptionFile vom Flutter Player. Weitere Informationen zum Player finden Sie hier . Daneben sind Downloads nur auf Android abspielbar . Hierbei liegt der Fehler im Flutter Player beim Abspielen lokaler Dateien, da die Datei VideoPlayerController.file fehlerhaft ist. Weitere Infomationen zu dem Download von Videos und dem Video Player finden Sie unter den entsprechenden Links. Des Weiteren wird beim Download von Videos nicht gespeichert, in welchem Semester der zugeh\u00f6rige Kurs abonniert wurde. Dies f\u00fchrt dazu dass im offline-Modus alle Kurse und zugeh\u00f6rigen Videos im aktuellen Semester angezeigt werden. Weitere Informationen zum Download von Videos finden Sie hier . Ein Formfehler tritt im Loginprozess auf iOS auf. Dort wird bei der Eingabe der Nutzerkennung der Anfangsbuchstabe immer gro\u00df geschrieben. Da dies allerdings die Anmeldeseite des DFN-AAI betrifft, konnten wir diesen Fehler leider nicht beheben.","title":"Restriktionen"},{"location":"restriktionen/#restriktionen","text":"Wie jede andere Software auch, unterliegt auch die mobile educast.nrw App gewissen Restriktionen, beziehungsweise konnten ein paar wenige Funktionalit\u00e4ten leider (noch) nicht so umgesetzt werden, wie erw\u00fcnscht. Grunds\u00e4tzlich ist die Aktualisierbarkeit des Flick Videoplayers eingeschr\u00e4nkt, da dessen Paket lokal integriert und leicht ver\u00e4ndert werden musste, um es auf unsere Anforderungen anzupassen. Dies bedeutet, dass Updates des Flick Videplayers nicht automatisiert in unsere App \u00fcbernommen werden k\u00f6nnen, sondern manuell in den Code eingef\u00fcgt werden m\u00fcssen. Weitere Informationen zum Player finden Sie hier . Dar\u00fcber hinaus ist das Ausw\u00e4hlen des Player Men\u00fcs bisher nur im Hochformat m\u00f6glich. Dies ist eine Funktion, welche nicht von dem Flick Videoplayer bereitgestellt wird. Auch nach ausf\u00fchrlichem Suchen und Austesten diverser Workarounds ist es uns leider nicht gelungen dieses Problem zu l\u00f6sen. Ein m\u00f6glicher weiterer Ansatz w\u00e4re der Austausch der Dropdown Buttons durch Custom Dropdownbuttons des Pakets cool_dropdown . Weitere Informationen zum Player finden Sie hier . Au\u00dferdem sind Untertitel nur einzeilig m\u00f6glich. Mehrzeilige Untertitel werden demnach in einer Zeile dargestellt. Der Fehler liegt in der Klasse WebVttCaptionFile vom Flutter Player. Weitere Informationen zum Player finden Sie hier . Daneben sind Downloads nur auf Android abspielbar . Hierbei liegt der Fehler im Flutter Player beim Abspielen lokaler Dateien, da die Datei VideoPlayerController.file fehlerhaft ist. Weitere Infomationen zu dem Download von Videos und dem Video Player finden Sie unter den entsprechenden Links. Des Weiteren wird beim Download von Videos nicht gespeichert, in welchem Semester der zugeh\u00f6rige Kurs abonniert wurde. Dies f\u00fchrt dazu dass im offline-Modus alle Kurse und zugeh\u00f6rigen Videos im aktuellen Semester angezeigt werden. Weitere Informationen zum Download von Videos finden Sie hier . Ein Formfehler tritt im Loginprozess auf iOS auf. Dort wird bei der Eingabe der Nutzerkennung der Anfangsbuchstabe immer gro\u00df geschrieben. Da dies allerdings die Anmeldeseite des DFN-AAI betrifft, konnten wir diesen Fehler leider nicht beheben.","title":"Restriktionen"},{"location":"setup/","text":"Technisches Setup des Systems Backend Damit die App funktioniert, muss zuerst das Backend aufgesetzt werden. Hierf\u00fcr ist ein Server mit Linux zu empfehlen, ein anderes OS w\u00fcrde aber durchaus auch funktionieren. Installation Nach erfolgreichem Aufsetzen des Servers und Installierens von Python (Version >= 3.7) den Source Code herunterladen mit git clone https://zivgitlab.uni-muenster.de/educast-nrw/student-work/app/backend.git Alle vom Backend verwendeten Dependencies k\u00f6nnen anschlie\u00dfend mit pip installiert werden: cd backend pip install -r requirements.txt Config erstellen Als n\u00e4chstes muss die Config aufgesetzt werden. Der einfachste Weg dazu ist, das Programm zu starten, sodass eine leere Konfigurationsdatei erstellt wird. python main.py [--config '/path/to/.login.yaml'] Wenn keine Config-Flag \u00fcbergeben wird, wird die Konfigurationdatei '.login.yaml' im home-Directory des aktuellen Users erstellt. Durch Verwendung des Arguments kann die Datei einen anderen Pfad und Namen bekommen, wobei wichtig ist, dass der Dateityp YAML ist. Konfiguration In der Konfigurationsdatei m\u00fcssen die Login-Credentials f\u00fcr die verwendeten API-User, sowie f\u00fcr die MySQL-Datenbank angeben werden. # TODO private key API-User Die API-User m\u00fcssen in der Section apiuser konfiguriert werden. Jeder dieser User ist eine weitere Section, die benannt ist mit der dazugeh\u00f6rigen Domain der jeweiligen Universit\u00e4t. Dies ist wichtig, um die API-Requests, bei Studierenden von unterschiedlichen Universit\u00e4ten, dem richtigen API-User zu schicken. Die Section ist ein Dictionary mit den String-Werten url , username und password . F\u00fcr die Uni M\u00fcnster w\u00fcrde die Konfiguration also wie folgt aussehen. apiuser: uni-muenster.de: url: https://link.to.uni-muenster.educast.de/api username: 'username' password: 'password' Die Section apiuser kann beliebig viele API-User enthalten, bzw. sollte f\u00fcr jede Uni, die den educast.nrw nutzt, einen enthalten. Die Hintergr\u00fcnde sind hier genauer erkl\u00e4rt. Datenbank Die Section database konfiguriert die Verbindung zur MySQL-Datenbank. Hier m\u00fcssen die Host-Addresse, die verwendete Datenbank und der User konfiguriert werden. Der User muss Schreibzugriff in der Datenbank haben, alle genutzten Tabellen werden dann automatisch erstellt. database: database: backend host: localhost user: 'username' password: 'password' Keypair F\u00fcr den Ablauf des Logins wird ein Schl\u00fcsselpaar ben\u00f6tigt, welches extern generiert werden muss. Der Pfad zum privaten Schl\u00fcssel muss in der .login.yaml in der Section keypair unter private angegeben werden. keypair: private: '/path/to/private_key' Da nach JWKS Spezifikation mehrere Public Keys valide sein k\u00f6nnen, muss der \u00f6ffentliche Schl\u00fcssel, bzw. jeder neu Generierte, mittels einer Funktion hinzugef\u00fcgt werden (siehe Login ). Diese Funktion kann mit dem folgenden Befehl ausgef\u00fchrt werden: python -m login.add_new_key(\"public_key\") Als Parameter muss der jeweilige Public Key \u00fcbergeben werden. Server starten Nach erfolgreichem Konfigurieren kann das Backend gestartet werden. Zum Starten folgenden Befehl ausf\u00fchren: python main.py Wenn gew\u00fcnscht, kann der Pfad der Konfigurationsdatei mit dem Argument --config '/path/to/.login.yaml' \u00fcbergeben werden. Der Server wird standardm\u00e4\u00dfig auf Port 80 gestartet. Auch das ist anpassbar mit dem Argument --port 8080 . Meistens werden zum binden eines Ports unter 1000 Root-Rechte ben\u00f6tigt. Frontend Die App ist mit dem Framework Flutter in Dart geschrieben. Der erste Schritt um die App zu kompilieren ist, Flutter nach der offiziellen Anleitung zu installieren. Kompilierung Android Um die App f\u00fcr Android zu kompilieren muss das Appbundle oder die APK gebaut werden. Das Appbundle enth\u00e4lt die APKs f\u00fcr unterschiedliche Laufzeiten (ARM 32-bit, ARM 64-bit, x86 64-bit) und ist deshalb vom Google Playstore bevorzugt. Zum Erstellen muss im Projektordner flutter build appbundle ausgef\u00fchrt werden. Anschlie\u00dfend ist es unter /build/app/outputs/bundle/release/app.aab zu finden. Um die APKs zu kompilieren muss flutter build apk --split-per-abi ausgef\u00fchrt werden. Die Flag f\u00fchrt dazu, dass f\u00fcr die unterschiedlichen Laufzeiten eigene APKs erstellt werden, anstatt eine Gro\u00dfe, die den kompilierten Code von allen enth\u00e4lt. Anschlie\u00dfend k\u00f6nnen alle gebauten APKs unter /build/app/outputs/bundle/release gefunden werden. Um die App nun direkt auf einem Ger\u00e4t zu installieren, muss es \u00fcber USB angeschlossen werden und USB-Debugging in den Einstellungen aktiviert sein. Anschlie\u00dfend reicht es flutter install auszuf\u00fchren und der richtige Build wird installiert. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf. iOS Um die App auf einem iOS-Ger\u00e4t zu installieren, wird ein Mac und ein Apple Developer Account gebraucht. Das Ger\u00e4t muss per USB an den Computer angeschlossen werden und es muss sowohl dem Mac, als auch dem Entwicklerzertifikat vertraut werden. Nachdem dem \"Diesen Computer vertrauen?\"-Dialog beim Verbinden zugestimmt wurde, muss in den Einstellungen unter Allgemein > Ger\u00e4teverwaltung dem Zertifikat vertraut werden. Ab iOS 16 ist es dazu n\u00f6tig den Entwicklermodus in den Sicherheitseinstellungen zu aktivieren. Sollte Xcode nicht bereits auf dem Mac installiert sein, ist es notwendig, es von der offiziellen Website zu installieren. Anschlie\u00dfend muss im Flutter-Projektordner open ios/Runner.xcworkspace in einem Terminal aufgerufen werden. Somit wird ein Xcode Workspace erstellt. Nach Ausw\u00e4hlen des richtigen Ger\u00e4tes, muss in den Zieleinstellungen unter \"Runner\" im Reiter Signing & Capabilities Ihr Account bei Team ausgew\u00e4hlt sein. Nun kann die App mit dem Startknopf oder mit dem Befehl flutter run gestartet werden. Eine USB-Verbindung muss allerdings bestehen bleiben. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"Setup"},{"location":"setup/#technisches-setup-des-systems","text":"","title":"Technisches Setup des Systems"},{"location":"setup/#backend","text":"Damit die App funktioniert, muss zuerst das Backend aufgesetzt werden. Hierf\u00fcr ist ein Server mit Linux zu empfehlen, ein anderes OS w\u00fcrde aber durchaus auch funktionieren.","title":"Backend"},{"location":"setup/#installation","text":"Nach erfolgreichem Aufsetzen des Servers und Installierens von Python (Version >= 3.7) den Source Code herunterladen mit git clone https://zivgitlab.uni-muenster.de/educast-nrw/student-work/app/backend.git Alle vom Backend verwendeten Dependencies k\u00f6nnen anschlie\u00dfend mit pip installiert werden: cd backend pip install -r requirements.txt","title":"Installation"},{"location":"setup/#config-erstellen","text":"Als n\u00e4chstes muss die Config aufgesetzt werden. Der einfachste Weg dazu ist, das Programm zu starten, sodass eine leere Konfigurationsdatei erstellt wird. python main.py [--config '/path/to/.login.yaml'] Wenn keine Config-Flag \u00fcbergeben wird, wird die Konfigurationdatei '.login.yaml' im home-Directory des aktuellen Users erstellt. Durch Verwendung des Arguments kann die Datei einen anderen Pfad und Namen bekommen, wobei wichtig ist, dass der Dateityp YAML ist.","title":"Config erstellen"},{"location":"setup/#konfiguration","text":"In der Konfigurationsdatei m\u00fcssen die Login-Credentials f\u00fcr die verwendeten API-User, sowie f\u00fcr die MySQL-Datenbank angeben werden. # TODO private key","title":"Konfiguration"},{"location":"setup/#api-user","text":"Die API-User m\u00fcssen in der Section apiuser konfiguriert werden. Jeder dieser User ist eine weitere Section, die benannt ist mit der dazugeh\u00f6rigen Domain der jeweiligen Universit\u00e4t. Dies ist wichtig, um die API-Requests, bei Studierenden von unterschiedlichen Universit\u00e4ten, dem richtigen API-User zu schicken. Die Section ist ein Dictionary mit den String-Werten url , username und password . F\u00fcr die Uni M\u00fcnster w\u00fcrde die Konfiguration also wie folgt aussehen. apiuser: uni-muenster.de: url: https://link.to.uni-muenster.educast.de/api username: 'username' password: 'password' Die Section apiuser kann beliebig viele API-User enthalten, bzw. sollte f\u00fcr jede Uni, die den educast.nrw nutzt, einen enthalten. Die Hintergr\u00fcnde sind hier genauer erkl\u00e4rt.","title":"API-User"},{"location":"setup/#datenbank","text":"Die Section database konfiguriert die Verbindung zur MySQL-Datenbank. Hier m\u00fcssen die Host-Addresse, die verwendete Datenbank und der User konfiguriert werden. Der User muss Schreibzugriff in der Datenbank haben, alle genutzten Tabellen werden dann automatisch erstellt. database: database: backend host: localhost user: 'username' password: 'password'","title":"Datenbank"},{"location":"setup/#keypair","text":"F\u00fcr den Ablauf des Logins wird ein Schl\u00fcsselpaar ben\u00f6tigt, welches extern generiert werden muss. Der Pfad zum privaten Schl\u00fcssel muss in der .login.yaml in der Section keypair unter private angegeben werden. keypair: private: '/path/to/private_key' Da nach JWKS Spezifikation mehrere Public Keys valide sein k\u00f6nnen, muss der \u00f6ffentliche Schl\u00fcssel, bzw. jeder neu Generierte, mittels einer Funktion hinzugef\u00fcgt werden (siehe Login ). Diese Funktion kann mit dem folgenden Befehl ausgef\u00fchrt werden: python -m login.add_new_key(\"public_key\") Als Parameter muss der jeweilige Public Key \u00fcbergeben werden.","title":"Keypair"},{"location":"setup/#server-starten","text":"Nach erfolgreichem Konfigurieren kann das Backend gestartet werden. Zum Starten folgenden Befehl ausf\u00fchren: python main.py Wenn gew\u00fcnscht, kann der Pfad der Konfigurationsdatei mit dem Argument --config '/path/to/.login.yaml' \u00fcbergeben werden. Der Server wird standardm\u00e4\u00dfig auf Port 80 gestartet. Auch das ist anpassbar mit dem Argument --port 8080 . Meistens werden zum binden eines Ports unter 1000 Root-Rechte ben\u00f6tigt.","title":"Server starten"},{"location":"setup/#frontend","text":"Die App ist mit dem Framework Flutter in Dart geschrieben. Der erste Schritt um die App zu kompilieren ist, Flutter nach der offiziellen Anleitung zu installieren.","title":"Frontend"},{"location":"setup/#kompilierung","text":"","title":"Kompilierung"},{"location":"setup/#android","text":"Um die App f\u00fcr Android zu kompilieren muss das Appbundle oder die APK gebaut werden. Das Appbundle enth\u00e4lt die APKs f\u00fcr unterschiedliche Laufzeiten (ARM 32-bit, ARM 64-bit, x86 64-bit) und ist deshalb vom Google Playstore bevorzugt. Zum Erstellen muss im Projektordner flutter build appbundle ausgef\u00fchrt werden. Anschlie\u00dfend ist es unter /build/app/outputs/bundle/release/app.aab zu finden. Um die APKs zu kompilieren muss flutter build apk --split-per-abi ausgef\u00fchrt werden. Die Flag f\u00fchrt dazu, dass f\u00fcr die unterschiedlichen Laufzeiten eigene APKs erstellt werden, anstatt eine Gro\u00dfe, die den kompilierten Code von allen enth\u00e4lt. Anschlie\u00dfend k\u00f6nnen alle gebauten APKs unter /build/app/outputs/bundle/release gefunden werden. Um die App nun direkt auf einem Ger\u00e4t zu installieren, muss es \u00fcber USB angeschlossen werden und USB-Debugging in den Einstellungen aktiviert sein. Anschlie\u00dfend reicht es flutter install auszuf\u00fchren und der richtige Build wird installiert. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"Android"},{"location":"setup/#ios","text":"Um die App auf einem iOS-Ger\u00e4t zu installieren, wird ein Mac und ein Apple Developer Account gebraucht. Das Ger\u00e4t muss per USB an den Computer angeschlossen werden und es muss sowohl dem Mac, als auch dem Entwicklerzertifikat vertraut werden. Nachdem dem \"Diesen Computer vertrauen?\"-Dialog beim Verbinden zugestimmt wurde, muss in den Einstellungen unter Allgemein > Ger\u00e4teverwaltung dem Zertifikat vertraut werden. Ab iOS 16 ist es dazu n\u00f6tig den Entwicklermodus in den Sicherheitseinstellungen zu aktivieren. Sollte Xcode nicht bereits auf dem Mac installiert sein, ist es notwendig, es von der offiziellen Website zu installieren. Anschlie\u00dfend muss im Flutter-Projektordner open ios/Runner.xcworkspace in einem Terminal aufgerufen werden. Somit wird ein Xcode Workspace erstellt. Nach Ausw\u00e4hlen des richtigen Ger\u00e4tes, muss in den Zieleinstellungen unter \"Runner\" im Reiter Signing & Capabilities Ihr Account bei Team ausgew\u00e4hlt sein. Nun kann die App mit dem Startknopf oder mit dem Befehl flutter run gestartet werden. Eine USB-Verbindung muss allerdings bestehen bleiben. F\u00fcr weitere Informationen rufen Sie die Dokumentation des Vorgangs auf der Flutter Website auf.","title":"iOS"},{"location":"userguide/","text":"Userguide In diesem Abschnitt wird Ihnen eine Schritt-f\u00fcr-Schritt Anleitung beschrieben, wie Sie unsere App nutzen k\u00f6nnen und welche Funktionalit\u00e4ten Ihnen zur Verf\u00fcgung stehen. Damit die Studierenden alle Funktionen der App nutzen k\u00f6nnen und sich gut zurechtfinden, gibt es mehrere m\u00f6glichst intuitive Ansichten. In der folgenden Grafik sind diese Ansichten und ihre Navigationswege zu sehen. Login Bevor man auf die eigentliche App zugreifen kann, muss man sich auf der Login Seite anmelden. Der Anmeldeprozess erfolgt \u00fcber die Authentifikations- und Autorisierungs-Infrastruktur des Deutschen Forschungsnetzes (DFN-AAI). Dabei w\u00e4hlt der:die Studierende seine Universit\u00e4t oder Fachhochschule aus und meldet sich dann mit den entsprechenden Zugangsdaten an. Detailliertere Informationen und technische Hintergr\u00fcnde finden Sie auf der Login Seite . Nach erfolgreichem Anmelden kommt man zur Hauptansicht der App. Bottom Navigation Bar \u00dcber die dauerhaft eingeblendete Bottom Navigation Bar k\u00f6nnen Sie zwischen drei Ansichten w\u00e4hlen, wie den Studierenden von anderen Apps bereits bekannt sein sollte. Dort k\u00f6nnen die Studierenden zwischen den Ansichten Home , Suche und Einstellungen wechseln. Home Auf der Homeansicht sieht man zun\u00e4chst einmal alle im derzeitigen Semester abonnierten Kurse und die zugeh\u00f6rigen Vorlesungsvideos. Zum Aktualisieren zieht man die Seite einmal nach unten. Dabei ist der Aufbau so, dass alle Kurse untereinander angeordnet sind und man dementsprechend durch vertikales Scrollen nach und nach alle seine Kurse untereinander angezeigt bekommt. Durch Anklicken des Kurstitels wechselt man zur Kursansicht dieses Kurses. Die Videos eines Kurses sind im Gegensatz dazu nebeneinander angeordnet und durch horizontales Wischen alle zu betrachten. Dabei werden einem zu jedem Video bereits der Titel, der:die Dozierende, das Erstelldatum, ein Vorschaubild und die Dauer des Videos angezeigt. Bei Anklicken dieses Videobereichs wird man auf die Videoansicht weitergeleitet. Kursansicht In der Kursansicht finden Sie alle Vorlesungsvideos eines Kurses. Diese sind nun untereinander angeordnet und jeder Videoblock enth\u00e4lt die gleichen Informationen wie in der Homeansicht. Durch Anklicken eines Videoblocks wechseln Sie zu dessen Videoansicht . Hier besteht die M\u00f6glichkeit ein Video oder gleich alle Videos des Kurses herunterzuladen. Dadurch klickt man entweder auf das Download Symbol (Pfeil nach unten) rechts neben dem Titel eines Videos oder auf das Download-Symbol ganz oben rechts neben dem Kurstitel. Videoansicht Die Videoansicht wird durch den auf die App zugeschnittenen Video Player umgesetzt und bildet das Herzst\u00fcck unserer Anwendung. Hier k\u00f6nnen Sie die Vorlesungsvideos anschauen. Unter dem Video lesen Sie eine Beschreibung des Vorlesungsinhalts. \u00dcber ein Men\u00fc erhalten Sie die Auswahlm\u00f6glichkeit zwischen unterschiedlichen Wiedergabeschwindigkeiten, Aufl\u00f6sungen und falls vorhanden auch auf verschiedene Ansichten des Vorlesungsvideos, beispielsweise der Foliensicht und der Sicht auf den:die Dozierende:n. Au\u00dferdem sind die Standardoptionen verf\u00fcgbar, wie Start/Stopp des Videos in der Mitte des Bildschirms, 15 Sekunden zur\u00fcck- oder vorspringen durch Doppelklicken im linken oder rechten Bereich des Videos und der Wechsel in den Vollbildmodus durch Anklicken des bekannten Symbols unten rechts. Suche In der Ansicht Suche haben Sie die M\u00f6glichkeit neue Kurse zu abonnieren. Dazu geben Sie einige Buchstaben des Titels, der:des Dozent:in oder der Beschreibung ein. Nach einer Sekunde erscheinen dann die zur Anfrage passenden Kurse der Universit\u00e4t oder Fachhochschule des:der Student:in. Durch vertikales Scrollen nach unten k\u00f6nnen noch weitere passende Kurse nachgeladen werden. Zum Abonnieren eines Kurses dr\u00fccken Sie auf das Plus-Symbol des entsprechenden Kurses. Daraufhin \u00f6ffnet sich ein Bereich, in dem Sie das Semester ausw\u00e4hlen k\u00f6nnen, in dem der Kurs abonniert werden soll. Voreingestellt ist das aktuelle Semester. Es ist aber auch m\u00f6glich das vorherige oder n\u00e4chste Semester zu w\u00e4hlen. Au\u00dferdem erscheint in diesem Auswahlbereich auch ein Feld f\u00fcr einen Einschreibeschl\u00fcssel, sofern der:die Dozent:in einen hinterlegt hat. In dem Fall k\u00f6nnen sich Studierende nicht ohne korrekte Eingabe des Einschreibeschl\u00fcssels zu dem Kurs anmelden. Falls ein Kurs nicht durch einen Einschreibeschl\u00fcssel gesch\u00fctzt ist, k\u00f6nnen Sie bereits vor dem Abonnieren durch Klicken auf den Kursnamen zur Kursansicht gelangen. Einstellungen In den Einstellungen sehen Sie ganz oben mit welchen Nutzerdaten Sie angemeldet sind. Darunter haben Sie die M\u00f6glichkeit die Sprache der App zu w\u00e4hlen. Zur Zeit stehen Englisch und Deutsch zur Verf\u00fcgung. Au\u00dferdem k\u00f6nnen Sie hier ihre Downloads verwalten. Das bedeutet, dass Sie einen \u00dcberblick \u00fcber all Ihre heruntergeladenen Videos nach Kursen sortiert bekommen. Eine L\u00f6schfunktion steht f\u00fcr jedes Video, alle Videos eines Kurs und alle Videos insgesamt zur Verf\u00fcgung. Dar\u00fcber hinaus k\u00f6nnen Sie sich von unserer App auch wieder abmelden. Dadurch gelangen Sie wieder auf die Startseite, auf welcher Sie zum Login aufgefordert werden. Offline-Modus Sollten Sie keinen Internetempfang haben, stehen Ihnen dennoch umfangreiche Funktionen zur Verf\u00fcgung. Im Prinip bleiben sowohl Homeansicht, wie auch Kursansicht und Videoansicht gleich mit dem Unterschied, dass nun nur heruntergeladene Videos angezeigt werden. Wie Sie Videos herunterladen k\u00f6nnen, k\u00f6nnen Sie hier nachlesen. In der Suche werden Sie darauf hingewiesen, dass Sie zur Zeit keinen Internetempfang haben, denn diese Funktion steht Ihnen nur online zur Verf\u00fcgung.","title":"Userguide"},{"location":"userguide/#userguide","text":"In diesem Abschnitt wird Ihnen eine Schritt-f\u00fcr-Schritt Anleitung beschrieben, wie Sie unsere App nutzen k\u00f6nnen und welche Funktionalit\u00e4ten Ihnen zur Verf\u00fcgung stehen. Damit die Studierenden alle Funktionen der App nutzen k\u00f6nnen und sich gut zurechtfinden, gibt es mehrere m\u00f6glichst intuitive Ansichten. In der folgenden Grafik sind diese Ansichten und ihre Navigationswege zu sehen.","title":"Userguide"},{"location":"userguide/#login","text":"Bevor man auf die eigentliche App zugreifen kann, muss man sich auf der Login Seite anmelden. Der Anmeldeprozess erfolgt \u00fcber die Authentifikations- und Autorisierungs-Infrastruktur des Deutschen Forschungsnetzes (DFN-AAI). Dabei w\u00e4hlt der:die Studierende seine Universit\u00e4t oder Fachhochschule aus und meldet sich dann mit den entsprechenden Zugangsdaten an. Detailliertere Informationen und technische Hintergr\u00fcnde finden Sie auf der Login Seite . Nach erfolgreichem Anmelden kommt man zur Hauptansicht der App.","title":"Login"},{"location":"userguide/#bottom-navigation-bar","text":"\u00dcber die dauerhaft eingeblendete Bottom Navigation Bar k\u00f6nnen Sie zwischen drei Ansichten w\u00e4hlen, wie den Studierenden von anderen Apps bereits bekannt sein sollte. Dort k\u00f6nnen die Studierenden zwischen den Ansichten Home , Suche und Einstellungen wechseln.","title":"Bottom Navigation Bar"},{"location":"userguide/#home","text":"Auf der Homeansicht sieht man zun\u00e4chst einmal alle im derzeitigen Semester abonnierten Kurse und die zugeh\u00f6rigen Vorlesungsvideos. Zum Aktualisieren zieht man die Seite einmal nach unten. Dabei ist der Aufbau so, dass alle Kurse untereinander angeordnet sind und man dementsprechend durch vertikales Scrollen nach und nach alle seine Kurse untereinander angezeigt bekommt. Durch Anklicken des Kurstitels wechselt man zur Kursansicht dieses Kurses. Die Videos eines Kurses sind im Gegensatz dazu nebeneinander angeordnet und durch horizontales Wischen alle zu betrachten. Dabei werden einem zu jedem Video bereits der Titel, der:die Dozierende, das Erstelldatum, ein Vorschaubild und die Dauer des Videos angezeigt. Bei Anklicken dieses Videobereichs wird man auf die Videoansicht weitergeleitet.","title":"Home"},{"location":"userguide/#kursansicht","text":"In der Kursansicht finden Sie alle Vorlesungsvideos eines Kurses. Diese sind nun untereinander angeordnet und jeder Videoblock enth\u00e4lt die gleichen Informationen wie in der Homeansicht. Durch Anklicken eines Videoblocks wechseln Sie zu dessen Videoansicht . Hier besteht die M\u00f6glichkeit ein Video oder gleich alle Videos des Kurses herunterzuladen. Dadurch klickt man entweder auf das Download Symbol (Pfeil nach unten) rechts neben dem Titel eines Videos oder auf das Download-Symbol ganz oben rechts neben dem Kurstitel.","title":"Kursansicht"},{"location":"userguide/#videoansicht","text":"Die Videoansicht wird durch den auf die App zugeschnittenen Video Player umgesetzt und bildet das Herzst\u00fcck unserer Anwendung. Hier k\u00f6nnen Sie die Vorlesungsvideos anschauen. Unter dem Video lesen Sie eine Beschreibung des Vorlesungsinhalts. \u00dcber ein Men\u00fc erhalten Sie die Auswahlm\u00f6glichkeit zwischen unterschiedlichen Wiedergabeschwindigkeiten, Aufl\u00f6sungen und falls vorhanden auch auf verschiedene Ansichten des Vorlesungsvideos, beispielsweise der Foliensicht und der Sicht auf den:die Dozierende:n. Au\u00dferdem sind die Standardoptionen verf\u00fcgbar, wie Start/Stopp des Videos in der Mitte des Bildschirms, 15 Sekunden zur\u00fcck- oder vorspringen durch Doppelklicken im linken oder rechten Bereich des Videos und der Wechsel in den Vollbildmodus durch Anklicken des bekannten Symbols unten rechts.","title":"Videoansicht"},{"location":"userguide/#suche","text":"In der Ansicht Suche haben Sie die M\u00f6glichkeit neue Kurse zu abonnieren. Dazu geben Sie einige Buchstaben des Titels, der:des Dozent:in oder der Beschreibung ein. Nach einer Sekunde erscheinen dann die zur Anfrage passenden Kurse der Universit\u00e4t oder Fachhochschule des:der Student:in. Durch vertikales Scrollen nach unten k\u00f6nnen noch weitere passende Kurse nachgeladen werden. Zum Abonnieren eines Kurses dr\u00fccken Sie auf das Plus-Symbol des entsprechenden Kurses. Daraufhin \u00f6ffnet sich ein Bereich, in dem Sie das Semester ausw\u00e4hlen k\u00f6nnen, in dem der Kurs abonniert werden soll. Voreingestellt ist das aktuelle Semester. Es ist aber auch m\u00f6glich das vorherige oder n\u00e4chste Semester zu w\u00e4hlen. Au\u00dferdem erscheint in diesem Auswahlbereich auch ein Feld f\u00fcr einen Einschreibeschl\u00fcssel, sofern der:die Dozent:in einen hinterlegt hat. In dem Fall k\u00f6nnen sich Studierende nicht ohne korrekte Eingabe des Einschreibeschl\u00fcssels zu dem Kurs anmelden. Falls ein Kurs nicht durch einen Einschreibeschl\u00fcssel gesch\u00fctzt ist, k\u00f6nnen Sie bereits vor dem Abonnieren durch Klicken auf den Kursnamen zur Kursansicht gelangen.","title":"Suche"},{"location":"userguide/#einstellungen","text":"In den Einstellungen sehen Sie ganz oben mit welchen Nutzerdaten Sie angemeldet sind. Darunter haben Sie die M\u00f6glichkeit die Sprache der App zu w\u00e4hlen. Zur Zeit stehen Englisch und Deutsch zur Verf\u00fcgung. Au\u00dferdem k\u00f6nnen Sie hier ihre Downloads verwalten. Das bedeutet, dass Sie einen \u00dcberblick \u00fcber all Ihre heruntergeladenen Videos nach Kursen sortiert bekommen. Eine L\u00f6schfunktion steht f\u00fcr jedes Video, alle Videos eines Kurs und alle Videos insgesamt zur Verf\u00fcgung. Dar\u00fcber hinaus k\u00f6nnen Sie sich von unserer App auch wieder abmelden. Dadurch gelangen Sie wieder auf die Startseite, auf welcher Sie zum Login aufgefordert werden.","title":"Einstellungen"},{"location":"userguide/#offline-modus","text":"Sollten Sie keinen Internetempfang haben, stehen Ihnen dennoch umfangreiche Funktionen zur Verf\u00fcgung. Im Prinip bleiben sowohl Homeansicht, wie auch Kursansicht und Videoansicht gleich mit dem Unterschied, dass nun nur heruntergeladene Videos angezeigt werden. Wie Sie Videos herunterladen k\u00f6nnen, k\u00f6nnen Sie hier nachlesen. In der Suche werden Sie darauf hingewiesen, dass Sie zur Zeit keinen Internetempfang haben, denn diese Funktion steht Ihnen nur online zur Verf\u00fcgung.","title":"Offline-Modus"},{"location":"implementation/download/","text":"Download Wie bereits in der Motivation und in den Anforderungen beschrieben, ist die Download-Funktion ein wichtiges Feature, das umgesetzt werden sollte. Im Folgenden wird die Umsetzung der Funktion dargestellt. Grundlagen Die Videos liegen im HLS-Format vor. Das bedeutet in unserem Fall, es liegt eine sogenannte Master-Playlist vor, die auf unterschiedliche Varianten-Playlists verweist, wobei eine Varianten-Playlist immer eine bestimmte Aufl\u00f6sung speichert. Das folgende Bild zeigt eine beispielhafte Master-Playlist. Master-Playlist mit drei Varianten Die angegebenen Pfade f\u00fchren zur jeweiligen Variante, welche die Datei ist, die die eigentlichen Abspielanweisungen enth\u00e4lt. Ausschnitt aus einer Varianten-Playlist Die Varianten-Playlist kodiert gewisse Byteranges im Video mit den zugeh\u00f6rigen Abschnitten in einer fragmentierten MP4-Datei (fMP4), deren URL spezifiziert wird. Eine fMP4 muss keine einzelne Datei sein, sondern kann auch aus mehreren Dateien bestehen, was bei educast aber nicht der Fall ist. Um ein Video offline abspielen zu k\u00f6nnen, muss also nur eine MP4-Datei und die dazugeh\u00f6rige Varianten-Playlist heruntergeladen werden. Nachfolgend wird die Speicherstruktur erl\u00e4utert. Speicherung Um die Daten strukturiert abspeichern zu k\u00f6nnen, wird auf das App-Verzeichnis zugegriffen. In diesem Verzeichnis k\u00f6nnen Dateien persistent gespeichert werden, ohne dass Zugriff von au\u00dferhalb m\u00f6glich ist (Videos k\u00f6nnen also nicht aus dem Speicher extrahiert werden). Die Speicherung von Videos erfolgt hierarchisch, geordnet nach den Serien, denen sie angeh\u00f6ren. Auf erster Ebene des App-Verzeichnisses sind die Metadaten aller Serien, von denen ein oder mehr Videos heruntergeladen sind, im JSON-Format gespeichert. Dies erm\u00f6glicht die Indizierung und das Darstellen von Serien-Metadaten wie bspw. dem Titel, auch wenn das genutzte Ger\u00e4t offline ist. Auf selbiger Ebene existiert f\u00fcr jede Serie ein Verzeichnis, in dem die jeweiligen Videos gespeichert werden. Im Serien-Verzeichnis sind wiederum alle Video-Metadaten von den Downloads gespeichert, genauso wie der relative Pfad zur Varianten-Playlist. Da die Playlist den Pfad zur MP4-Datei speichert, kann sie zum Abspielen einfach als Input f\u00fcr den Player genutzt werden. Exemplarische Darstellung der resultierenden Ordnerstruktur (F\u00fcr eine bessere \u00dcbersicht wurden die tats\u00e4chlichen IDs, die eigentlich als Ordnernamen dienen, ersetzt) Herunterladen Nach der Extraktion des Pfades der Varianten-Playlist, kann diese ohne Besonderheiten heruntergeladen und im Serienordner abgelegt werden. Hier funktioniert das Herunterladen \u00fcber eine HTTP-Request, deren Response-Body der Dateiinhalt ist. Somit muss nur die Antwort gespeichert werden. Bei den MP4-Dateien ist ein komplexeres Verfahren notwendig. Da es sich um Vorlesungsvideos handelt, welche standardm\u00e4\u00dfig eine L\u00e4nge von 90 Minuten haben, ist mit sehr gro\u00dfen Dateien zu rechnen. Dieser Umstand erfordert es, dass die Videos fortlaufend in eine Datei geschrieben werden. Dies wurde mit einer Streamed Response umgesetzt, deren Senke, also Datenendpunkt, eine Datei ist. Somit werden die Pakete, die vom Ger\u00e4t empfangen werden, sukzessive auf die Festplatte geschrieben, ohne die gesamte Datei im RAM zwischenzuspeichern. Um den Download mehrerer Videos gleichzeitig zu erm\u00f6glichen, werden sogenannte Download-Worker genutzt. Es existiert ein Pool an Download-Workern, aus denen immer ein freier gew\u00e4hlt wird, um einen Download zu starten. Sollten alle belegt sein, werden die Downloads in eine Warteschlange eingef\u00fcgt und nacheinander abgearbeitet. Aktuell ist die Zahl der Download-Worker auf drei gesetzt, kann aber in der Datei educast/lib/download/download_pool.dart angepasst werden.","title":"Download"},{"location":"implementation/download/#download","text":"Wie bereits in der Motivation und in den Anforderungen beschrieben, ist die Download-Funktion ein wichtiges Feature, das umgesetzt werden sollte. Im Folgenden wird die Umsetzung der Funktion dargestellt.","title":"Download"},{"location":"implementation/download/#grundlagen","text":"Die Videos liegen im HLS-Format vor. Das bedeutet in unserem Fall, es liegt eine sogenannte Master-Playlist vor, die auf unterschiedliche Varianten-Playlists verweist, wobei eine Varianten-Playlist immer eine bestimmte Aufl\u00f6sung speichert. Das folgende Bild zeigt eine beispielhafte Master-Playlist. Master-Playlist mit drei Varianten Die angegebenen Pfade f\u00fchren zur jeweiligen Variante, welche die Datei ist, die die eigentlichen Abspielanweisungen enth\u00e4lt. Ausschnitt aus einer Varianten-Playlist Die Varianten-Playlist kodiert gewisse Byteranges im Video mit den zugeh\u00f6rigen Abschnitten in einer fragmentierten MP4-Datei (fMP4), deren URL spezifiziert wird. Eine fMP4 muss keine einzelne Datei sein, sondern kann auch aus mehreren Dateien bestehen, was bei educast aber nicht der Fall ist. Um ein Video offline abspielen zu k\u00f6nnen, muss also nur eine MP4-Datei und die dazugeh\u00f6rige Varianten-Playlist heruntergeladen werden. Nachfolgend wird die Speicherstruktur erl\u00e4utert.","title":"Grundlagen"},{"location":"implementation/download/#speicherung","text":"Um die Daten strukturiert abspeichern zu k\u00f6nnen, wird auf das App-Verzeichnis zugegriffen. In diesem Verzeichnis k\u00f6nnen Dateien persistent gespeichert werden, ohne dass Zugriff von au\u00dferhalb m\u00f6glich ist (Videos k\u00f6nnen also nicht aus dem Speicher extrahiert werden). Die Speicherung von Videos erfolgt hierarchisch, geordnet nach den Serien, denen sie angeh\u00f6ren. Auf erster Ebene des App-Verzeichnisses sind die Metadaten aller Serien, von denen ein oder mehr Videos heruntergeladen sind, im JSON-Format gespeichert. Dies erm\u00f6glicht die Indizierung und das Darstellen von Serien-Metadaten wie bspw. dem Titel, auch wenn das genutzte Ger\u00e4t offline ist. Auf selbiger Ebene existiert f\u00fcr jede Serie ein Verzeichnis, in dem die jeweiligen Videos gespeichert werden. Im Serien-Verzeichnis sind wiederum alle Video-Metadaten von den Downloads gespeichert, genauso wie der relative Pfad zur Varianten-Playlist. Da die Playlist den Pfad zur MP4-Datei speichert, kann sie zum Abspielen einfach als Input f\u00fcr den Player genutzt werden. Exemplarische Darstellung der resultierenden Ordnerstruktur (F\u00fcr eine bessere \u00dcbersicht wurden die tats\u00e4chlichen IDs, die eigentlich als Ordnernamen dienen, ersetzt)","title":"Speicherung"},{"location":"implementation/download/#herunterladen","text":"Nach der Extraktion des Pfades der Varianten-Playlist, kann diese ohne Besonderheiten heruntergeladen und im Serienordner abgelegt werden. Hier funktioniert das Herunterladen \u00fcber eine HTTP-Request, deren Response-Body der Dateiinhalt ist. Somit muss nur die Antwort gespeichert werden. Bei den MP4-Dateien ist ein komplexeres Verfahren notwendig. Da es sich um Vorlesungsvideos handelt, welche standardm\u00e4\u00dfig eine L\u00e4nge von 90 Minuten haben, ist mit sehr gro\u00dfen Dateien zu rechnen. Dieser Umstand erfordert es, dass die Videos fortlaufend in eine Datei geschrieben werden. Dies wurde mit einer Streamed Response umgesetzt, deren Senke, also Datenendpunkt, eine Datei ist. Somit werden die Pakete, die vom Ger\u00e4t empfangen werden, sukzessive auf die Festplatte geschrieben, ohne die gesamte Datei im RAM zwischenzuspeichern. Um den Download mehrerer Videos gleichzeitig zu erm\u00f6glichen, werden sogenannte Download-Worker genutzt. Es existiert ein Pool an Download-Workern, aus denen immer ein freier gew\u00e4hlt wird, um einen Download zu starten. Sollten alle belegt sein, werden die Downloads in eine Warteschlange eingef\u00fcgt und nacheinander abgearbeitet. Aktuell ist die Zahl der Download-Worker auf drei gesetzt, kann aber in der Datei educast/lib/download/download_pool.dart angepasst werden.","title":"Herunterladen"},{"location":"implementation/player/","text":"Player Kernbestandteil der App ist der integrierte Videoplayer. Dieser baut auf dem \u201eFlick Videoplayer\u201c auf und wurde an unsere speziellen Anforderungen angepasst. Der Flick Videoplayer wiederum basiert auf dem offiziellen Videoplayer unseres verwendeten Frameworks Flutter . Die Entscheidung f\u00fcr den Flick Videoplayer Die Entscheidung den Flick Videoplayer als Basis zu nutzen, war eine der zentralen Entscheidungen dieses Projekts. Nach dem Untersuchen mehrerer Alternativen und nachdem sich alle Gruppenmitglieder bzgl. Dieser Thematik informiert hatten, haben wir uns f\u00fcr diese L\u00f6sung entschieden. Die erste Alternative w\u00e4re gewesen, den offiziellen Flutter Video Player als Basis zu verwenden. Dieser stellt jedoch lediglich Grundfunktionalit\u00e4ten zur Verf\u00fcgung, was diese L\u00f6sung sehr aufw\u00e4ndig f\u00fcr den begrenzten Projektzeitraum und unsere begrenzte Vorerfahrung gemacht h\u00e4tte. Als ersten Player, der f\u00fcr uns grunds\u00e4tzlich infrage kam und der auf dem Flutter Videoplayer basiert, haben wir uns \u201eChewie\u201c genauer angeschaut. Wir haben uns letztendlich gegen diesen Player entschieden, da bei ihm abh\u00e4ngig vom verwendeten Betriebssystem andere Benutzeroberfl\u00e4chen verwendet werden. Einerseits hielten wir die iOS-Version f\u00fcr unpraktisch und andererseits war es ausdr\u00fccklich gew\u00fcnscht, dass der Player auf beiden Plattformen m\u00f6glichst identisch aussieht. Dies w\u00e4re beim \u201eBetter Player\u201c der Fall gewesen. Dieser h\u00e4tte auch wichtige Funktionen wie das \u00c4ndern der Wiedergabegeschwindigkeit, das Anzeigen von Untertiteln oder das \u00c4ndern der Videoaufl\u00f6sung unterst\u00fctzt. Nachdem allerdings bei der Integration in unsere App erhebliche Performanceprobleme aufgetreten waren und diese dann auch in der, von den Entwicklern zur Verf\u00fcgung gestellten, Test-Applikation auftraten, mussten wir uns gegen den Better Player entscheiden. Es konnte keine Ursache f\u00fcr diese Probleme gefunden und behoben werden. Zuletzt fanden wir den angesprochenen Flick Video Player . Dieser baut ebenfalls auf dem Basisplayer von Flutter auf, stellt bereits einige wichtige Funktionen zur Verf\u00fcgung, hat uns optisch angesprochen und ist gut anpassbar bzw. erweiterbar. Da hier auch die Performance stimmte und es keine sonstigen Probleme gab, haben wir uns schlie\u00dflich daf\u00fcr entschieden den Flick Player zu verwenden. Allgemeiner Aufbau Flick Videoplayer Benutzeroberfl\u00e4che des Flick Videoplayers Unsere App nutzt die Benutzeroberfl\u00e4che des Flick Players und dessen Funktionen f\u00fcr das Wechseln von Videos und das Anzeigen von Untertiteln. Er stellt also die grundlegenden Bedienelemente wie Play, Pause, +10s, -10s per Doppeltap, einen Vollbildmodus und das Navigieren per Zeitleiste zur Verf\u00fcgung. Eigenes Men\u00fc im Videoplayer Eigenes Men\u00fc im Videoplayer Darauf aufbauend haben wir ein Men\u00fc f\u00fcr zus\u00e4tzliche Funktionalit\u00e4ten erstellt. Dieses Men\u00fc erm\u00f6glicht es Nutzern abh\u00e4ngig vom Video: Die Wiedergabegeschwindigkeit zu \u00e4ndern, die Aufl\u00f6sung zu \u00e4ndern, zwischen verschiedenen Ansichten zu wechseln, und Untertitel anzuzeigen. Anpassungen des Flick Videoplayers Der Flick Videoplayer stellt zwei anpassbare Klassen zur Verf\u00fcgung ( DataManager und CustomOrientationControls ), was wir f\u00fcr dieses Men\u00fc genutzt haben. Diese \u00c4nderungen reichten jedoch nicht aus und daher mussten wir interne Klassen des Players ver\u00e4ndern und ihn daf\u00fcr lokal in das Projekt integrieren. Dies war erforderlich, um zu gew\u00e4hrleisten, dass die Wiedergabeposition unver\u00e4ndert blieb, wenn die Aufl\u00f6sung oder die Ansicht gewechselt wurde. Im Ordner flick_video_player/lib/src/manager wurden an folgenden Stellen \u00c4nderungen vorgenommen: flick_manager.dart: handleChangeVideo( ) video_manager.dart: _handleChangeVideo( ), _changeVideo( ) Die \u00c4nderungen sind jeweils mit dem Stichwort \"CHANGED\" markiert. HTTP Live Streaming (HLS) Wir verwenden in der App HTTP Live Streaming (HLS) . F\u00fcr das Abspielen eines Videos erh\u00e4lt der Player eine Liste mit URLs zu Masterplaylisten. Gibt es f\u00fcr das Video mehrere Ansichten, sind es mehrere Masterplaylisten. Innerhalb dieser Masterplaylisten gibt es wiederum mehrere Variantenplaylists f\u00fcr die einzelnen Aufl\u00f6sungen. Um diese auszulesen, verwenden wir das Paket flutter_hls_parser . Restriktionen Momentan ist es leider nicht m\u00f6glich mehrzeilige Untertitel anzuzeigen und das Men\u00fc des Players im Vollbildmodus zu nutzen. Weitere Informationen hierzu finden sich im Bereich Restriktionen .","title":"Player"},{"location":"implementation/player/#player","text":"Kernbestandteil der App ist der integrierte Videoplayer. Dieser baut auf dem \u201eFlick Videoplayer\u201c auf und wurde an unsere speziellen Anforderungen angepasst. Der Flick Videoplayer wiederum basiert auf dem offiziellen Videoplayer unseres verwendeten Frameworks Flutter .","title":"Player"},{"location":"implementation/player/#die-entscheidung-fur-den-flick-videoplayer","text":"Die Entscheidung den Flick Videoplayer als Basis zu nutzen, war eine der zentralen Entscheidungen dieses Projekts. Nach dem Untersuchen mehrerer Alternativen und nachdem sich alle Gruppenmitglieder bzgl. Dieser Thematik informiert hatten, haben wir uns f\u00fcr diese L\u00f6sung entschieden. Die erste Alternative w\u00e4re gewesen, den offiziellen Flutter Video Player als Basis zu verwenden. Dieser stellt jedoch lediglich Grundfunktionalit\u00e4ten zur Verf\u00fcgung, was diese L\u00f6sung sehr aufw\u00e4ndig f\u00fcr den begrenzten Projektzeitraum und unsere begrenzte Vorerfahrung gemacht h\u00e4tte. Als ersten Player, der f\u00fcr uns grunds\u00e4tzlich infrage kam und der auf dem Flutter Videoplayer basiert, haben wir uns \u201eChewie\u201c genauer angeschaut. Wir haben uns letztendlich gegen diesen Player entschieden, da bei ihm abh\u00e4ngig vom verwendeten Betriebssystem andere Benutzeroberfl\u00e4chen verwendet werden. Einerseits hielten wir die iOS-Version f\u00fcr unpraktisch und andererseits war es ausdr\u00fccklich gew\u00fcnscht, dass der Player auf beiden Plattformen m\u00f6glichst identisch aussieht. Dies w\u00e4re beim \u201eBetter Player\u201c der Fall gewesen. Dieser h\u00e4tte auch wichtige Funktionen wie das \u00c4ndern der Wiedergabegeschwindigkeit, das Anzeigen von Untertiteln oder das \u00c4ndern der Videoaufl\u00f6sung unterst\u00fctzt. Nachdem allerdings bei der Integration in unsere App erhebliche Performanceprobleme aufgetreten waren und diese dann auch in der, von den Entwicklern zur Verf\u00fcgung gestellten, Test-Applikation auftraten, mussten wir uns gegen den Better Player entscheiden. Es konnte keine Ursache f\u00fcr diese Probleme gefunden und behoben werden. Zuletzt fanden wir den angesprochenen Flick Video Player . Dieser baut ebenfalls auf dem Basisplayer von Flutter auf, stellt bereits einige wichtige Funktionen zur Verf\u00fcgung, hat uns optisch angesprochen und ist gut anpassbar bzw. erweiterbar. Da hier auch die Performance stimmte und es keine sonstigen Probleme gab, haben wir uns schlie\u00dflich daf\u00fcr entschieden den Flick Player zu verwenden.","title":"Die Entscheidung f\u00fcr den Flick Videoplayer"},{"location":"implementation/player/#allgemeiner-aufbau","text":"","title":"Allgemeiner Aufbau"},{"location":"implementation/player/#flick-videoplayer","text":"Benutzeroberfl\u00e4che des Flick Videoplayers Unsere App nutzt die Benutzeroberfl\u00e4che des Flick Players und dessen Funktionen f\u00fcr das Wechseln von Videos und das Anzeigen von Untertiteln. Er stellt also die grundlegenden Bedienelemente wie Play, Pause, +10s, -10s per Doppeltap, einen Vollbildmodus und das Navigieren per Zeitleiste zur Verf\u00fcgung.","title":"Flick Videoplayer"},{"location":"implementation/player/#eigenes-menu-im-videoplayer","text":"Eigenes Men\u00fc im Videoplayer Darauf aufbauend haben wir ein Men\u00fc f\u00fcr zus\u00e4tzliche Funktionalit\u00e4ten erstellt. Dieses Men\u00fc erm\u00f6glicht es Nutzern abh\u00e4ngig vom Video: Die Wiedergabegeschwindigkeit zu \u00e4ndern, die Aufl\u00f6sung zu \u00e4ndern, zwischen verschiedenen Ansichten zu wechseln, und Untertitel anzuzeigen.","title":"Eigenes Men\u00fc im Videoplayer"},{"location":"implementation/player/#anpassungen-des-flick-videoplayers","text":"Der Flick Videoplayer stellt zwei anpassbare Klassen zur Verf\u00fcgung ( DataManager und CustomOrientationControls ), was wir f\u00fcr dieses Men\u00fc genutzt haben. Diese \u00c4nderungen reichten jedoch nicht aus und daher mussten wir interne Klassen des Players ver\u00e4ndern und ihn daf\u00fcr lokal in das Projekt integrieren. Dies war erforderlich, um zu gew\u00e4hrleisten, dass die Wiedergabeposition unver\u00e4ndert blieb, wenn die Aufl\u00f6sung oder die Ansicht gewechselt wurde. Im Ordner flick_video_player/lib/src/manager wurden an folgenden Stellen \u00c4nderungen vorgenommen: flick_manager.dart: handleChangeVideo( ) video_manager.dart: _handleChangeVideo( ), _changeVideo( ) Die \u00c4nderungen sind jeweils mit dem Stichwort \"CHANGED\" markiert.","title":"Anpassungen des Flick Videoplayers"},{"location":"implementation/player/#http-live-streaming-hls","text":"Wir verwenden in der App HTTP Live Streaming (HLS) . F\u00fcr das Abspielen eines Videos erh\u00e4lt der Player eine Liste mit URLs zu Masterplaylisten. Gibt es f\u00fcr das Video mehrere Ansichten, sind es mehrere Masterplaylisten. Innerhalb dieser Masterplaylisten gibt es wiederum mehrere Variantenplaylists f\u00fcr die einzelnen Aufl\u00f6sungen. Um diese auszulesen, verwenden wir das Paket flutter_hls_parser .","title":"HTTP Live Streaming (HLS)"},{"location":"implementation/player/#restriktionen","text":"Momentan ist es leider nicht m\u00f6glich mehrzeilige Untertitel anzuzeigen und das Men\u00fc des Players im Vollbildmodus zu nutzen. Weitere Informationen hierzu finden sich im Bereich Restriktionen .","title":"Restriktionen"}]}